
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a8c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001c00  80001c00  00002000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002000  80002000  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002084  80002084  00002484  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002088  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002594  00002d14  2**0
                  ALLOC
  9 .bss          00000070  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da78  00000588  00000588  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005c8  00000000  00000000  00002dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000af4  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c4d0  00000000  00000000  00003e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000207c  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004458  00000000  00000000  000123d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c1c  00000000  00000000  00016830  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c5b  00000000  00000000  0001744c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018bf  00000000  00000000  000190a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00532b9e  00000000  00000000  0001a966  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000508  00000000  00000000  0054d504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	12 64       	and	r4,r9

Disassembly of section .text:

80000008 <insert_after>:
#include "include/kernel/lists.h"



int16_t insert_after( tcb * position_tcb, tcb * new_tcb )
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
80000018:	3f f8       	mov	r8,-1
8000001a:	ef 58 ff fe 	st.h	r7[-2],r8

	//	printf("position tcb: %d\n", position_tcb);

	if(position_tcb != NULL && new_tcb != NULL)
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	58 08       	cp.w	r8,0
80000024:	c2 00       	breq	80000064 <insert_after+0x5c>
80000026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000002a:	58 08       	cp.w	r8,0
8000002c:	c1 c0       	breq	80000064 <insert_after+0x5c>
	{
		new_tcb->nexttcb = position_tcb->nexttcb;
8000002e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000032:	70 09       	ld.w	r9,r8[0x0]
80000034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000038:	91 09       	st.w	r8[0x0],r9
		new_tcb->prevtcb = position_tcb;
8000003a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	f1 49 00 70 	st.w	r8[112],r9
		position_tcb->nexttcb = new_tcb;
80000046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000004a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000004e:	91 09       	st.w	r8[0x0],r9
		new_tcb->nexttcb->prevtcb = new_tcb;
80000050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000054:	70 08       	ld.w	r8,r8[0x0]
80000056:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000005a:	f1 49 00 70 	st.w	r8[112],r9
		
		result = 0;
8000005e:	30 08       	mov	r8,0
80000060:	ef 58 ff fe 	st.h	r7[-2],r8
	}

	return result;
80000064:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000068:	10 9c       	mov	r12,r8
8000006a:	2f dd       	sub	sp,-12
8000006c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000070 <insert_by_priority>:


int16_t insert_by_priority( tcb * list_head, tcb * new_tcb )
{
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 4d       	sub	sp,16
80000078:	ef 4c ff f4 	st.w	r7[-12],r12
8000007c:	ef 4b ff f0 	st.w	r7[-16],r11
	int16_t result = -1;
80000080:	3f f8       	mov	r8,-1
80000082:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator = list_head;
80000086:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000008a:	ef 48 ff fc 	st.w	r7[-4],r8

	//	printf("position tcb: %d\n", position_tcb);
	
	if(list_head != NULL && new_tcb != NULL)
8000008e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000092:	58 08       	cp.w	r8,0
80000094:	c2 60       	breq	800000e0 <insert_by_priority+0x70>
80000096:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000009a:	58 08       	cp.w	r8,0
8000009c:	c2 20       	breq	800000e0 <insert_by_priority+0x70>
	{
		
		while(iterator && iterator->effective_priority <= new_tcb->effective_priority)
8000009e:	c0 68       	rjmp	800000aa <insert_by_priority+0x3a>
		{
			iterator = iterator->nexttcb;
800000a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000a4:	70 08       	ld.w	r8,r8[0x0]
800000a6:	ef 48 ff fc 	st.w	r7[-4],r8
	//	printf("position tcb: %d\n", position_tcb);
	
	if(list_head != NULL && new_tcb != NULL)
	{
		
		while(iterator && iterator->effective_priority <= new_tcb->effective_priority)
800000aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ae:	58 08       	cp.w	r8,0
800000b0:	c0 d0       	breq	800000ca <insert_by_priority+0x5a>
800000b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000b6:	f1 39 00 65 	ld.ub	r9,r8[101]
800000ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800000be:	f1 38 00 65 	ld.ub	r8,r8[101]
800000c2:	f0 09 18 00 	cp.b	r9,r8
800000c6:	fe 98 ff ed 	brls	800000a0 <insert_by_priority+0x30>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, new_tcb);
800000ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800000ce:	71 c8       	ld.w	r8,r8[0x70]
800000d0:	ee fb ff f0 	ld.w	r11,r7[-16]
800000d4:	10 9c       	mov	r12,r8
800000d6:	f0 1f 00 06 	mcall	800000ec <insert_by_priority+0x7c>
		result = 0;
800000da:	30 08       	mov	r8,0
800000dc:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	return result;
800000e0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800000e4:	10 9c       	mov	r12,r8
800000e6:	2f cd       	sub	sp,-16
800000e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800000ec:	80 00       	ld.sh	r0,r0[0x0]
800000ee:	00 08       	add	r8,r0

800000f0 <insert_by_back_online_time>:

int16_t insert_by_back_online_time( tcb * list_head, tcb * new_tcb )
{
800000f0:	eb cd 40 80 	pushm	r7,lr
800000f4:	1a 97       	mov	r7,sp
800000f6:	20 4d       	sub	sp,16
800000f8:	ef 4c ff f4 	st.w	r7[-12],r12
800000fc:	ef 4b ff f0 	st.w	r7[-16],r11
	int16_t result = -1;
80000100:	3f f8       	mov	r8,-1
80000102:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * iterator = list_head;
80000106:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000010a:	ef 48 ff fc 	st.w	r7[-4],r8

	//	printf("position tcb: %d\n", position_tcb);
	
	if(list_head != NULL && new_tcb != NULL)
8000010e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000112:	58 08       	cp.w	r8,0
80000114:	c2 70       	breq	80000162 <insert_by_back_online_time+0x72>
80000116:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000011a:	58 08       	cp.w	r8,0
8000011c:	c2 30       	breq	80000162 <insert_by_back_online_time+0x72>
	{
		
		while(iterator && iterator->back_online_time <= new_tcb->back_online_time)
8000011e:	c0 68       	rjmp	8000012a <insert_by_back_online_time+0x3a>
		{
			iterator = iterator->nexttcb;
80000120:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000124:	70 08       	ld.w	r8,r8[0x0]
80000126:	ef 48 ff fc 	st.w	r7[-4],r8
	//	printf("position tcb: %d\n", position_tcb);
	
	if(list_head != NULL && new_tcb != NULL)
	{
		
		while(iterator && iterator->back_online_time <= new_tcb->back_online_time)
8000012a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000012e:	58 08       	cp.w	r8,0
80000130:	c0 e0       	breq	8000014c <insert_by_back_online_time+0x5c>
80000132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000136:	f0 ea 00 68 	ld.d	r10,r8[104]
8000013a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000013e:	f0 e8 00 68 	ld.d	r8,r8[104]
80000142:	10 3a       	cp.w	r10,r8
80000144:	f2 0b 13 00 	cpc	r11,r9
80000148:	fe 98 ff ec 	brls	80000120 <insert_by_back_online_time+0x30>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, new_tcb);
8000014c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000150:	71 c8       	ld.w	r8,r8[0x70]
80000152:	ee fb ff f0 	ld.w	r11,r7[-16]
80000156:	10 9c       	mov	r12,r8
80000158:	f0 1f 00 06 	mcall	80000170 <insert_by_back_online_time+0x80>
		result = 0;
8000015c:	30 08       	mov	r8,0
8000015e:	ef 58 ff fa 	st.h	r7[-6],r8
	}

	return result;
80000162:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80000166:	10 9c       	mov	r12,r8
80000168:	2f cd       	sub	sp,-16
8000016a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000016e:	00 00       	add	r0,r0
80000170:	80 00       	ld.sh	r0,r0[0x0]
80000172:	00 08       	add	r8,r0

80000174 <usart_options>:
80000174:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 34     ............tsk4
80000184:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
80000194:	00 00 00 00 74 73 6b 33 00 00 00 00 74 73 6b 35     ....tsk3....tsk5
800001a4:	00 00 00 00                                         ....

800001a8 <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
800001a8:	eb cd 40 80 	pushm	r7,lr
800001ac:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
800001ae:	33 bc       	mov	r12,59
800001b0:	f0 1f 00 0c 	mcall	800001e0 <task1+0x38>
		ledOff(LED1_GPIO);
800001b4:	33 cc       	mov	r12,60
800001b6:	f0 1f 00 0c 	mcall	800001e4 <task1+0x3c>
		delay_ms(abs(1000 - ROSA_getTickCount()));
800001ba:	f0 1f 00 0c 	mcall	800001e8 <task1+0x40>
800001be:	14 98       	mov	r8,r10
800001c0:	16 99       	mov	r9,r11
800001c2:	e0 6a 03 e8 	mov	r10,1000
800001c6:	30 0b       	mov	r11,0
800001c8:	f4 08 01 08 	sub	r8,r10,r8
800001cc:	f6 09 01 49 	sbc	r9,r11,r9
800001d0:	5c 48       	abs	r8
800001d2:	10 9c       	mov	r12,r8
800001d4:	f0 1f 00 06 	mcall	800001ec <task1+0x44>
		ROSA_yield();
800001d8:	f0 1f 00 06 	mcall	800001f0 <task1+0x48>
	}
800001dc:	ce 9b       	rjmp	800001ae <task1+0x6>
800001de:	00 00       	add	r0,r0
800001e0:	80 00       	ld.sh	r0,r0[0x0]
800001e2:	0e 74       	tst	r4,r7
800001e4:	80 00       	ld.sh	r0,r0[0x0]
800001e6:	0e 94       	mov	r4,r7
800001e8:	80 00       	ld.sh	r0,r0[0x0]
800001ea:	0b a4       	ld.ub	r4,r5[0x2]
800001ec:	80 00       	ld.sh	r0,r0[0x0]
800001ee:	0c 1c       	sub	r12,r6
800001f0:	80 00       	ld.sh	r0,r0[0x0]
800001f2:	0a 0e       	add	lr,r5

800001f4 <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
800001f4:	eb cd 40 80 	pushm	r7,lr
800001f8:	1a 97       	mov	r7,sp
	while(1) {
		ledOff(LED0_GPIO);
800001fa:	33 bc       	mov	r12,59
800001fc:	f0 1f 00 0b 	mcall	80000228 <task2+0x34>
		ledOn(LED1_GPIO);
80000200:	33 cc       	mov	r12,60
80000202:	f0 1f 00 0b 	mcall	8000022c <task2+0x38>
		delay_ms(abs(ROSA_getTickCount() - 1000));
80000206:	f0 1f 00 0b 	mcall	80000230 <task2+0x3c>
8000020a:	fe 78 fc 18 	mov	r8,-1000
8000020e:	3f f9       	mov	r9,-1
80000210:	f4 08 00 08 	add	r8,r10,r8
80000214:	f6 09 00 49 	adc	r9,r11,r9
80000218:	5c 48       	abs	r8
8000021a:	10 9c       	mov	r12,r8
8000021c:	f0 1f 00 06 	mcall	80000234 <task2+0x40>
		ROSA_yield();
80000220:	f0 1f 00 06 	mcall	80000238 <task2+0x44>
	}
80000224:	ce bb       	rjmp	800001fa <task2+0x6>
80000226:	00 00       	add	r0,r0
80000228:	80 00       	ld.sh	r0,r0[0x0]
8000022a:	0e 94       	mov	r4,r7
8000022c:	80 00       	ld.sh	r0,r0[0x0]
8000022e:	0e 74       	tst	r4,r7
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	0b a4       	ld.ub	r4,r5[0x2]
80000234:	80 00       	ld.sh	r0,r0[0x0]
80000236:	0c 1c       	sub	r12,r6
80000238:	80 00       	ld.sh	r0,r0[0x0]
8000023a:	0a 0e       	add	lr,r5

8000023c <task3>:
/*************************************************************
 * Task3
 * LED2 toggles
 ************************************************************/
void task3(void)
{
8000023c:	eb cd 40 80 	pushm	r7,lr
80000240:	1a 97       	mov	r7,sp
	//uint64_t currentTime = ROSA_getTickCount();
	while(1) {
		ledToggle(LED2_GPIO);
80000242:	33 dc       	mov	r12,61
80000244:	f0 1f 00 04 	mcall	80000254 <task3+0x18>
		//ROSA_delay(30);
		//ROSA_delayUntil(&currentTime, 30);
		
		delay_ms(100);
80000248:	36 4c       	mov	r12,100
8000024a:	f0 1f 00 04 	mcall	80000258 <task3+0x1c>
		ROSA_yield();
8000024e:	f0 1f 00 04 	mcall	8000025c <task3+0x20>
	}
80000252:	cf 8b       	rjmp	80000242 <task3+0x6>
80000254:	80 00       	ld.sh	r0,r0[0x0]
80000256:	0e b4       	st.h	r7++,r4
80000258:	80 00       	ld.sh	r0,r0[0x0]
8000025a:	0c 1c       	sub	r12,r6
8000025c:	80 00       	ld.sh	r0,r0[0x0]
8000025e:	0a 0e       	add	lr,r5

80000260 <task4>:
/*************************************************************
 * Task4
 * LED3 toggles
 ************************************************************/
void task4(void)
{
80000260:	eb cd 40 80 	pushm	r7,lr
80000264:	1a 97       	mov	r7,sp
	while(1) {
		ledToggle(LED3_GPIO);
80000266:	33 ec       	mov	r12,62
80000268:	f0 1f 00 05 	mcall	8000027c <task4+0x1c>
		delay_ms(200);
8000026c:	e0 6c 00 c8 	mov	r12,200
80000270:	f0 1f 00 04 	mcall	80000280 <task4+0x20>
		ROSA_yield();
80000274:	f0 1f 00 04 	mcall	80000284 <task4+0x24>
	}
80000278:	cf 7b       	rjmp	80000266 <task4+0x6>
8000027a:	00 00       	add	r0,r0
8000027c:	80 00       	ld.sh	r0,r0[0x0]
8000027e:	0e b4       	st.h	r7++,r4
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	0c 1c       	sub	r12,r6
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	0a 0e       	add	lr,r5

80000288 <task5>:
/*************************************************************
 * Task2
 * deletes task5 after some time, then turns on LED4
 ************************************************************/
void task5(void)
{
80000288:	eb cd 40 80 	pushm	r7,lr
8000028c:	1a 97       	mov	r7,sp
	while(1)
	{
		//set green LED only
		ledOff(LED4_GPIO);
8000028e:	33 3c       	mov	r12,51
80000290:	f0 1f 00 11 	mcall	800002d4 <task5+0x4c>
		ledOn(LED5_GPIO);
80000294:	33 4c       	mov	r12,52
80000296:	f0 1f 00 11 	mcall	800002d8 <task5+0x50>
		ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 4); //blink LED4 on board
8000029a:	30 48       	mov	r8,4
8000029c:	34 09       	mov	r9,64
8000029e:	49 0a       	lddpc	r10,800002dc <task5+0x54>
800002a0:	49 0b       	lddpc	r11,800002e0 <task5+0x58>
800002a2:	49 1c       	lddpc	r12,800002e4 <task5+0x5c>
800002a4:	f0 1f 00 11 	mcall	800002e8 <task5+0x60>
		//ROSA_tcbUninstall(task3_handle);
		//ROSA_tcbSuspend(task3_handle);
		//delay_ms(1000);
		ROSA_delay(100);
800002a8:	36 4a       	mov	r10,100
800002aa:	30 0b       	mov	r11,0
800002ac:	f0 1f 00 10 	mcall	800002ec <task5+0x64>
		
		ROSA_taskDelete(task4_handle); //stop blinking LED4 on board
800002b0:	48 d8       	lddpc	r8,800002e4 <task5+0x5c>
800002b2:	70 08       	ld.w	r8,r8[0x0]
800002b4:	10 9c       	mov	r12,r8
800002b6:	f0 1f 00 0f 	mcall	800002f0 <task5+0x68>
		//ROSA_tcbUnsuspend(task3_handle);
		//ROSA_tcbInstall(task3_handle);
		ledOff(LED5_GPIO);	//set red LED only
800002ba:	33 4c       	mov	r12,52
800002bc:	f0 1f 00 06 	mcall	800002d4 <task5+0x4c>
		ledOn(LED4_GPIO);
800002c0:	33 3c       	mov	r12,51
800002c2:	f0 1f 00 06 	mcall	800002d8 <task5+0x50>
		//delay_ms(1000);
		ROSA_delay(100);
800002c6:	36 4a       	mov	r10,100
800002c8:	30 0b       	mov	r11,0
800002ca:	f0 1f 00 09 	mcall	800002ec <task5+0x64>
		ROSA_yield();
800002ce:	f0 1f 00 0a 	mcall	800002f4 <task5+0x6c>
	}
800002d2:	cd eb       	rjmp	8000028e <task5+0x6>
800002d4:	80 00       	ld.sh	r0,r0[0x0]
800002d6:	0e 94       	mov	r4,r7
800002d8:	80 00       	ld.sh	r0,r0[0x0]
800002da:	0e 74       	tst	r4,r7
800002dc:	80 00       	ld.sh	r0,r0[0x0]
800002de:	02 60       	and	r0,r1
800002e0:	80 00       	ld.sh	r0,r0[0x0]
800002e2:	01 80       	ld.ub	r0,r0[0x0]
800002e4:	00 00       	add	r0,r0
800002e6:	05 78       	ld.ub	r8,--r2
800002e8:	80 00       	ld.sh	r0,r0[0x0]
800002ea:	07 80       	ld.ub	r0,r3[0x0]
800002ec:	80 00       	ld.sh	r0,r0[0x0]
800002ee:	08 dc       	st.w	--r4,r12
800002f0:	80 00       	ld.sh	r0,r0[0x0]
800002f2:	08 38       	cp.w	r8,r4
800002f4:	80 00       	ld.sh	r0,r0[0x0]
800002f6:	0a 0e       	add	lr,r5

800002f8 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800002f8:	eb cd 40 80 	pushm	r7,lr
800002fc:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800002fe:	f0 1f 00 11 	mcall	80000340 <main+0x48>


	ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 5);
80000302:	30 58       	mov	r8,5
80000304:	34 09       	mov	r9,64
80000306:	49 0a       	lddpc	r10,80000344 <main+0x4c>
80000308:	49 0b       	lddpc	r11,80000348 <main+0x50>
8000030a:	49 1c       	lddpc	r12,8000034c <main+0x54>
8000030c:	f0 1f 00 11 	mcall	80000350 <main+0x58>
	ROSA_taskCreate(& task2_handle, "tsk2", task2, 0x40, 3);
80000310:	30 38       	mov	r8,3
80000312:	34 09       	mov	r9,64
80000314:	49 0a       	lddpc	r10,80000354 <main+0x5c>
80000316:	49 1b       	lddpc	r11,80000358 <main+0x60>
80000318:	49 1c       	lddpc	r12,8000035c <main+0x64>
8000031a:	f0 1f 00 0e 	mcall	80000350 <main+0x58>
	ROSA_taskCreate(& task3_handle, "tsk3", task3, 0x40, 2);
8000031e:	30 28       	mov	r8,2
80000320:	34 09       	mov	r9,64
80000322:	49 0a       	lddpc	r10,80000360 <main+0x68>
80000324:	49 0b       	lddpc	r11,80000364 <main+0x6c>
80000326:	49 1c       	lddpc	r12,80000368 <main+0x70>
80000328:	f0 1f 00 0a 	mcall	80000350 <main+0x58>
	//ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 1);
	ROSA_taskCreate(& task5_handle, "tsk5", task5, 0x40, 1);
8000032c:	30 18       	mov	r8,1
8000032e:	34 09       	mov	r9,64
80000330:	48 fa       	lddpc	r10,8000036c <main+0x74>
80000332:	49 0b       	lddpc	r11,80000370 <main+0x78>
80000334:	49 0c       	lddpc	r12,80000374 <main+0x7c>
80000336:	f0 1f 00 07 	mcall	80000350 <main+0x58>
	
	//Start the ROSA kernel
	ROSA_start();
8000033a:	f0 1f 00 10 	mcall	80000378 <main+0x80>
	/* Execution will never return here */
	while(1);
8000033e:	c0 08       	rjmp	8000033e <main+0x46>
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	03 d8       	ld.ub	r8,r1[0x5]
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	01 a8       	ld.ub	r8,r0[0x2]
80000348:	80 00       	ld.sh	r0,r0[0x0]
8000034a:	01 88       	ld.ub	r8,r0[0x0]
8000034c:	00 00       	add	r0,r0
8000034e:	05 54       	ld.sh	r4,--r2
80000350:	80 00       	ld.sh	r0,r0[0x0]
80000352:	07 80       	ld.ub	r0,r3[0x0]
80000354:	80 00       	ld.sh	r0,r0[0x0]
80000356:	01 f4       	ld.ub	r4,r0[0x7]
80000358:	80 00       	ld.sh	r0,r0[0x0]
8000035a:	01 90       	ld.ub	r0,r0[0x1]
8000035c:	00 00       	add	r0,r0
8000035e:	05 5c       	ld.sh	r12,--r2
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	02 3c       	cp.w	r12,r1
80000364:	80 00       	ld.sh	r0,r0[0x0]
80000366:	01 98       	ld.ub	r8,r0[0x1]
80000368:	00 00       	add	r0,r0
8000036a:	05 74       	ld.ub	r4,--r2
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	02 88       	andn	r8,r1
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	01 a0       	ld.ub	r0,r0[0x2]
80000374:	00 00       	add	r0,r0
80000376:	05 70       	ld.ub	r0,--r2
80000378:	80 00       	ld.sh	r0,r0[0x0]
8000037a:	09 4c       	ld.w	r12,--r4

8000037c <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
8000037c:	eb cd 40 80 	pushm	r7,lr
80000380:	1a 97       	mov	r7,sp
	interruptDisable();
80000382:	f0 1f 00 0d 	mcall	800003b4 <ROSA_yieldFromISR+0x38>
	contextSaveFromISR();	  //Save the task context
80000386:	f0 1f 00 0d 	mcall	800003b8 <ROSA_yieldFromISR+0x3c>
	system_ticks ++;
8000038a:	48 d8       	lddpc	r8,800003bc <ROSA_yieldFromISR+0x40>
8000038c:	f0 ea 00 00 	ld.d	r10,r8[0]
80000390:	30 18       	mov	r8,1
80000392:	30 09       	mov	r9,0
80000394:	f4 08 00 08 	add	r8,r10,r8
80000398:	f6 09 00 49 	adc	r9,r11,r9
8000039c:	48 8a       	lddpc	r10,800003bc <ROSA_yieldFromISR+0x40>
8000039e:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
800003a2:	f0 1f 00 08 	mcall	800003c0 <ROSA_yieldFromISR+0x44>
	contextRestoreFromISR();  //...and switch over to it.
800003a6:	f0 1f 00 08 	mcall	800003c4 <ROSA_yieldFromISR+0x48>
	interruptEnable();
800003aa:	f0 1f 00 08 	mcall	800003c8 <ROSA_yieldFromISR+0x4c>
}
800003ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800003b2:	00 00       	add	r0,r0
800003b4:	80 00       	ld.sh	r0,r0[0x0]
800003b6:	1d 66       	ld.uh	r6,--lr
800003b8:	80 00       	ld.sh	r0,r0[0x0]
800003ba:	1d 7e       	ld.ub	lr,--lr
800003bc:	00 00       	add	r0,r0
800003be:	05 68       	ld.uh	r8,--r2
800003c0:	80 00       	ld.sh	r0,r0[0x0]
800003c2:	0a 2c       	rsub	r12,r5
800003c4:	80 00       	ld.sh	r0,r0[0x0]
800003c6:	1d b8       	ld.ub	r8,lr[0x3]
800003c8:	80 00       	ld.sh	r0,r0[0x0]
800003ca:	1d 6a       	ld.uh	r10,--lr

800003cc <usart_options>:
800003cc:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

800003d8 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
800003d8:	eb cd 40 80 	pushm	r7,lr
800003dc:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800003de:	f0 1f 00 13 	mcall	80000428 <ROSA_init+0x50>
	buttonInit();								//Buttons
800003e2:	f0 1f 00 13 	mcall	8000042c <ROSA_init+0x54>
	joystickInit();								//Joystick
800003e6:	f0 1f 00 13 	mcall	80000430 <ROSA_init+0x58>
	potInit();									//Potentiometer
800003ea:	f0 1f 00 13 	mcall	80000434 <ROSA_init+0x5c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
800003ee:	e0 6a 1b 00 	mov	r10,6912
800003f2:	ea 1a 00 b7 	orh	r10,0xb7
800003f6:	49 1b       	lddpc	r11,80000438 <ROSA_init+0x60>
800003f8:	fe 7c 14 00 	mov	r12,-60416
800003fc:	f0 1f 00 10 	mcall	8000043c <ROSA_init+0x64>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000400:	49 08       	lddpc	r8,80000440 <ROSA_init+0x68>
80000402:	30 09       	mov	r9,0
80000404:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000406:	49 08       	lddpc	r8,80000444 <ROSA_init+0x6c>
80000408:	30 09       	mov	r9,0
8000040a:	91 09       	st.w	r8[0x0],r9

	//Initialize the timer to 100 ms period.
	//...
	interruptInit();
8000040c:	f0 1f 00 0f 	mcall	80000448 <ROSA_init+0x70>
	system_ticks = 0;
80000410:	48 fa       	lddpc	r10,8000044c <ROSA_init+0x74>
80000412:	30 08       	mov	r8,0
80000414:	30 09       	mov	r9,0
80000416:	f4 e9 00 00 	st.d	r10[0],r8
	timerInit(5);
8000041a:	30 5c       	mov	r12,5
8000041c:	f0 1f 00 0d 	mcall	80000450 <ROSA_init+0x78>
	timerStart();
80000420:	f0 1f 00 0d 	mcall	80000454 <ROSA_init+0x7c>
	//...
}
80000424:	e3 cd 80 80 	ldm	sp++,r7,pc
80000428:	80 00       	ld.sh	r0,r0[0x0]
8000042a:	0d e8       	ld.ub	r8,r6[0x6]
8000042c:	80 00       	ld.sh	r0,r0[0x0]
8000042e:	0b bc       	ld.ub	r12,r5[0x3]
80000430:	80 00       	ld.sh	r0,r0[0x0]
80000432:	0b e4       	ld.ub	r4,r5[0x6]
80000434:	80 00       	ld.sh	r0,r0[0x0]
80000436:	0e d4       	st.w	--r7,r4
80000438:	80 00       	ld.sh	r0,r0[0x0]
8000043a:	03 cc       	ld.ub	r12,r1[0x4]
8000043c:	80 00       	ld.sh	r0,r0[0x0]
8000043e:	10 88       	andn	r8,r8
80000440:	00 00       	add	r0,r0
80000442:	05 50       	ld.sh	r0,--r2
80000444:	00 00       	add	r0,r0
80000446:	05 7c       	ld.ub	r12,--r2
80000448:	80 00       	ld.sh	r0,r0[0x0]
8000044a:	1d 48       	ld.w	r8,--lr
8000044c:	00 00       	add	r0,r0
8000044e:	05 68       	ld.uh	r8,--r2
80000450:	80 00       	ld.sh	r0,r0[0x0]
80000452:	11 ac       	ld.ub	r12,r8[0x2]
80000454:	80 00       	ld.sh	r0,r0[0x0]
80000456:	11 da       	ld.ub	r10,r8[0x5]

80000458 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000458:	eb cd 40 80 	pushm	r7,lr
8000045c:	1a 97       	mov	r7,sp
8000045e:	20 6d       	sub	sp,24
80000460:	ef 4c ff f8 	st.w	r7[-8],r12
80000464:	ef 4b ff f4 	st.w	r7[-12],r11
80000468:	ef 4a ff f0 	st.w	r7[-16],r10
8000046c:	ef 49 ff ec 	st.w	r7[-20],r9
80000470:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000474:	30 08       	mov	r8,0
80000476:	ef 48 ff fc 	st.w	r7[-4],r8
8000047a:	c1 48       	rjmp	800004a2 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
8000047c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000480:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000484:	ee fa ff f4 	ld.w	r10,r7[-12]
80000488:	f4 08 00 08 	add	r8,r10,r8
8000048c:	11 88       	ld.ub	r8,r8[0x0]
8000048e:	ee fa ff f8 	ld.w	r10,r7[-8]
80000492:	f4 09 00 09 	add	r9,r10,r9
80000496:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000049c:	2f f8       	sub	r8,-1
8000049e:	ef 48 ff fc 	st.w	r7[-4],r8
800004a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004a6:	58 38       	cp.w	r8,3
800004a8:	fe 9a ff ea 	brle	8000047c <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800004ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004b0:	30 09       	mov	r9,0
800004b2:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800004b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004bc:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800004be:	ee f9 ff f0 	ld.w	r9,r7[-16]
800004c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004c6:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800004c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004cc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800004d0:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
800004d2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800004d6:	a3 68       	lsl	r8,0x2
800004d8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800004dc:	10 09       	add	r9,r8
800004de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e2:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800004e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004e8:	70 39       	ld.w	r9,r8[0xc]
800004ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ee:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800004f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004f4:	fc 19 00 1c 	movh	r9,0x1c
800004f8:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
800004fa:	ee fc ff f8 	ld.w	r12,r7[-8]
800004fe:	f0 1f 00 03 	mcall	80000508 <ROSA_tcbCreate+0xb0>
}
80000502:	2f ad       	sub	sp,-24
80000504:	e3 cd 80 80 	ldm	sp++,r7,pc
80000508:	80 00       	ld.sh	r0,r0[0x0]
8000050a:	09 82       	ld.ub	r2,r4[0x0]

8000050c <ROSA_tcbInstall>:
	//}
//}

// insert into the ready list
void ROSA_tcbInstall(tcb * tcbTask)
{
8000050c:	eb cd 40 80 	pushm	r7,lr
80000510:	1a 97       	mov	r7,sp
80000512:	20 1d       	sub	sp,4
80000514:	ef 4c ff fc 	st.w	r7[-4],r12
	// check if tcbTask is null is missing
	if(TCBLIST == NULL)
80000518:	4a 28       	lddpc	r8,800005a0 <ROSA_tcbInstall+0x94>
8000051a:	70 08       	ld.w	r8,r8[0x0]
8000051c:	58 08       	cp.w	r8,0
8000051e:	c1 51       	brne	80000548 <ROSA_tcbInstall+0x3c>
	{
		TCBLIST = tcbTask;
80000520:	4a 08       	lddpc	r8,800005a0 <ROSA_tcbInstall+0x94>
80000522:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000526:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000052c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000530:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
80000532:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000536:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000053a:	f1 49 00 70 	st.w	r8[112],r9
		TCBLIST_end = tcbTask;
8000053e:	49 a8       	lddpc	r8,800005a4 <ROSA_tcbInstall+0x98>
80000540:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000544:	91 09       	st.w	r8[0x0],r9
80000546:	c2 a8       	rjmp	8000059a <ROSA_tcbInstall+0x8e>
	}
	else if(tcbTask->effective_priority < TCBLIST->effective_priority)
80000548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000054c:	f1 39 00 65 	ld.ub	r9,r8[101]
80000550:	49 48       	lddpc	r8,800005a0 <ROSA_tcbInstall+0x94>
80000552:	70 08       	ld.w	r8,r8[0x0]
80000554:	f1 38 00 65 	ld.ub	r8,r8[101]
80000558:	f0 09 18 00 	cp.b	r9,r8
8000055c:	c0 d2       	brcc	80000576 <ROSA_tcbInstall+0x6a>
	{
		insert_after(TCBLIST_end, tcbTask);
8000055e:	49 28       	lddpc	r8,800005a4 <ROSA_tcbInstall+0x98>
80000560:	70 08       	ld.w	r8,r8[0x0]
80000562:	ee fb ff fc 	ld.w	r11,r7[-4]
80000566:	10 9c       	mov	r12,r8
80000568:	f0 1f 00 10 	mcall	800005a8 <ROSA_tcbInstall+0x9c>
		TCBLIST = tcbTask;
8000056c:	48 d8       	lddpc	r8,800005a0 <ROSA_tcbInstall+0x94>
8000056e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000572:	91 09       	st.w	r8[0x0],r9
80000574:	c1 38       	rjmp	8000059a <ROSA_tcbInstall+0x8e>
	}
	else
	{
		insert_by_priority(TCBLIST, tcbTask);
80000576:	48 b8       	lddpc	r8,800005a0 <ROSA_tcbInstall+0x94>
80000578:	70 08       	ld.w	r8,r8[0x0]
8000057a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000057e:	10 9c       	mov	r12,r8
80000580:	f0 1f 00 0b 	mcall	800005ac <ROSA_tcbInstall+0xa0>
		if(TCBLIST->prevtcb == tcbTask)
80000584:	48 78       	lddpc	r8,800005a0 <ROSA_tcbInstall+0x94>
80000586:	70 08       	ld.w	r8,r8[0x0]
80000588:	71 c9       	ld.w	r9,r8[0x70]
8000058a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000058e:	10 39       	cp.w	r9,r8
80000590:	c0 51       	brne	8000059a <ROSA_tcbInstall+0x8e>
		{
			TCBLIST_end = tcbTask;
80000592:	48 58       	lddpc	r8,800005a4 <ROSA_tcbInstall+0x98>
80000594:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000598:	91 09       	st.w	r8[0x0],r9
		}		
	}
}
8000059a:	2f fd       	sub	sp,-4
8000059c:	e3 cd 80 80 	ldm	sp++,r7,pc
800005a0:	00 00       	add	r0,r0
800005a2:	05 50       	ld.sh	r0,--r2
800005a4:	00 00       	add	r0,r0
800005a6:	05 60       	ld.uh	r0,--r2
800005a8:	80 00       	ld.sh	r0,r0[0x0]
800005aa:	00 08       	add	r8,r0
800005ac:	80 00       	ld.sh	r0,r0[0x0]
800005ae:	00 70       	tst	r0,r0

800005b0 <ROSA_tcbUninstall>:

// removes a tcb from the ready list
void ROSA_tcbUninstall(tcb * tcbTask)
{
800005b0:	eb cd 40 80 	pushm	r7,lr
800005b4:	1a 97       	mov	r7,sp
800005b6:	20 1d       	sub	sp,4
800005b8:	ef 4c ff fc 	st.w	r7[-4],r12
	// if empty OR if only one element
	if(TCBLIST == TCBLIST_end)
800005bc:	4a 08       	lddpc	r8,8000063c <ROSA_tcbUninstall+0x8c>
800005be:	70 09       	ld.w	r9,r8[0x0]
800005c0:	4a 08       	lddpc	r8,80000640 <ROSA_tcbUninstall+0x90>
800005c2:	70 08       	ld.w	r8,r8[0x0]
800005c4:	10 39       	cp.w	r9,r8
800005c6:	c0 81       	brne	800005d6 <ROSA_tcbUninstall+0x26>
	{
		TCBLIST = NULL;
800005c8:	49 d8       	lddpc	r8,8000063c <ROSA_tcbUninstall+0x8c>
800005ca:	30 09       	mov	r9,0
800005cc:	91 09       	st.w	r8[0x0],r9
		TCBLIST_end = NULL;
800005ce:	49 d8       	lddpc	r8,80000640 <ROSA_tcbUninstall+0x90>
800005d0:	30 09       	mov	r9,0
800005d2:	91 09       	st.w	r8[0x0],r9
800005d4:	c3 08       	rjmp	80000634 <ROSA_tcbUninstall+0x84>
	}
	else 
	{
		if(TCBLIST_end == tcbTask)
800005d6:	49 b8       	lddpc	r8,80000640 <ROSA_tcbUninstall+0x90>
800005d8:	70 09       	ld.w	r9,r8[0x0]
800005da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005de:	10 39       	cp.w	r9,r8
800005e0:	c0 71       	brne	800005ee <ROSA_tcbUninstall+0x3e>
		{
			TCBLIST_end = tcbTask->prevtcb;
800005e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005e6:	71 c9       	ld.w	r9,r8[0x70]
800005e8:	49 68       	lddpc	r8,80000640 <ROSA_tcbUninstall+0x90>
800005ea:	91 09       	st.w	r8[0x0],r9
800005ec:	c0 c8       	rjmp	80000604 <ROSA_tcbUninstall+0x54>
		}
		else if(TCBLIST == tcbTask)
800005ee:	49 48       	lddpc	r8,8000063c <ROSA_tcbUninstall+0x8c>
800005f0:	70 09       	ld.w	r9,r8[0x0]
800005f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005f6:	10 39       	cp.w	r9,r8
800005f8:	c0 61       	brne	80000604 <ROSA_tcbUninstall+0x54>
		{
			TCBLIST = tcbTask->nexttcb;
800005fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005fe:	70 09       	ld.w	r9,r8[0x0]
80000600:	48 f8       	lddpc	r8,8000063c <ROSA_tcbUninstall+0x8c>
80000602:	91 09       	st.w	r8[0x0],r9
		}
	
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
80000604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000608:	71 c8       	ld.w	r8,r8[0x70]
8000060a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000060e:	72 09       	ld.w	r9,r9[0x0]
80000610:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
80000612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000616:	70 08       	ld.w	r8,r8[0x0]
80000618:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000061c:	73 c9       	ld.w	r9,r9[0x70]
8000061e:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
80000622:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000626:	30 09       	mov	r9,0
80000628:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
8000062a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000062e:	30 09       	mov	r9,0
80000630:	f1 49 00 70 	st.w	r8[112],r9
	}
}
80000634:	2f fd       	sub	sp,-4
80000636:	e3 cd 80 80 	ldm	sp++,r7,pc
8000063a:	00 00       	add	r0,r0
8000063c:	00 00       	add	r0,r0
8000063e:	05 50       	ld.sh	r0,--r2
80000640:	00 00       	add	r0,r0
80000642:	05 60       	ld.uh	r0,--r2

80000644 <ROSA_tcbSuspend>:

void ROSA_tcbSuspend(tcb * tcbTask)
{
80000644:	eb cd 40 80 	pushm	r7,lr
80000648:	1a 97       	mov	r7,sp
8000064a:	20 1d       	sub	sp,4
8000064c:	ef 4c ff fc 	st.w	r7[-4],r12
	// check if tcbTask is null is missing
	if(SUSPENDEDLIST == NULL)
80000650:	4a 38       	lddpc	r8,800006dc <ROSA_tcbSuspend+0x98>
80000652:	70 08       	ld.w	r8,r8[0x0]
80000654:	58 08       	cp.w	r8,0
80000656:	c1 51       	brne	80000680 <ROSA_tcbSuspend+0x3c>
	{
		SUSPENDEDLIST = tcbTask;
80000658:	4a 18       	lddpc	r8,800006dc <ROSA_tcbSuspend+0x98>
8000065a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000065e:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000664:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000668:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
8000066a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000066e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000672:	f1 49 00 70 	st.w	r8[112],r9
		SUSPENDEDLIST_end = tcbTask;
80000676:	49 b8       	lddpc	r8,800006e0 <ROSA_tcbSuspend+0x9c>
80000678:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000067c:	91 09       	st.w	r8[0x0],r9
8000067e:	c2 b8       	rjmp	800006d4 <ROSA_tcbSuspend+0x90>
	}
	else if(tcbTask->back_online_time < SUSPENDEDLIST->back_online_time)
80000680:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000684:	f0 ea 00 68 	ld.d	r10,r8[104]
80000688:	49 58       	lddpc	r8,800006dc <ROSA_tcbSuspend+0x98>
8000068a:	70 08       	ld.w	r8,r8[0x0]
8000068c:	f0 e8 00 68 	ld.d	r8,r8[104]
80000690:	10 3a       	cp.w	r10,r8
80000692:	f2 0b 13 00 	cpc	r11,r9
80000696:	c0 d2       	brcc	800006b0 <ROSA_tcbSuspend+0x6c>
	{
		insert_after(SUSPENDEDLIST_end, tcbTask);
80000698:	49 28       	lddpc	r8,800006e0 <ROSA_tcbSuspend+0x9c>
8000069a:	70 08       	ld.w	r8,r8[0x0]
8000069c:	ee fb ff fc 	ld.w	r11,r7[-4]
800006a0:	10 9c       	mov	r12,r8
800006a2:	f0 1f 00 11 	mcall	800006e4 <ROSA_tcbSuspend+0xa0>
		SUSPENDEDLIST = tcbTask;
800006a6:	48 e8       	lddpc	r8,800006dc <ROSA_tcbSuspend+0x98>
800006a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800006ac:	91 09       	st.w	r8[0x0],r9
800006ae:	c1 38       	rjmp	800006d4 <ROSA_tcbSuspend+0x90>
	}
	else
	{
		insert_by_back_online_time(SUSPENDEDLIST, tcbTask);
800006b0:	48 b8       	lddpc	r8,800006dc <ROSA_tcbSuspend+0x98>
800006b2:	70 08       	ld.w	r8,r8[0x0]
800006b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800006b8:	10 9c       	mov	r12,r8
800006ba:	f0 1f 00 0c 	mcall	800006e8 <ROSA_tcbSuspend+0xa4>
		if(SUSPENDEDLIST->prevtcb == tcbTask)
800006be:	48 88       	lddpc	r8,800006dc <ROSA_tcbSuspend+0x98>
800006c0:	70 08       	ld.w	r8,r8[0x0]
800006c2:	71 c9       	ld.w	r9,r8[0x70]
800006c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006c8:	10 39       	cp.w	r9,r8
800006ca:	c0 51       	brne	800006d4 <ROSA_tcbSuspend+0x90>
		{
			SUSPENDEDLIST_end = tcbTask;
800006cc:	48 58       	lddpc	r8,800006e0 <ROSA_tcbSuspend+0x9c>
800006ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800006d2:	91 09       	st.w	r8[0x0],r9
		}
	}
}
800006d4:	2f fd       	sub	sp,-4
800006d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800006da:	00 00       	add	r0,r0
800006dc:	00 00       	add	r0,r0
800006de:	05 58       	ld.sh	r8,--r2
800006e0:	00 00       	add	r0,r0
800006e2:	05 64       	ld.uh	r4,--r2
800006e4:	80 00       	ld.sh	r0,r0[0x0]
800006e6:	00 08       	add	r8,r0
800006e8:	80 00       	ld.sh	r0,r0[0x0]
800006ea:	00 f0       	st.b	--r0,r0

800006ec <ROSA_tcbUnsuspend>:

void ROSA_tcbUnsuspend(tcb * tcbTask)
{
800006ec:	eb cd 40 80 	pushm	r7,lr
800006f0:	1a 97       	mov	r7,sp
800006f2:	20 1d       	sub	sp,4
800006f4:	ef 4c ff fc 	st.w	r7[-4],r12
	// if empty OR if only one element
	if(SUSPENDEDLIST == SUSPENDEDLIST_end)
800006f8:	4a 08       	lddpc	r8,80000778 <ROSA_tcbUnsuspend+0x8c>
800006fa:	70 09       	ld.w	r9,r8[0x0]
800006fc:	4a 08       	lddpc	r8,8000077c <ROSA_tcbUnsuspend+0x90>
800006fe:	70 08       	ld.w	r8,r8[0x0]
80000700:	10 39       	cp.w	r9,r8
80000702:	c0 81       	brne	80000712 <ROSA_tcbUnsuspend+0x26>
	{
		SUSPENDEDLIST = NULL;
80000704:	49 d8       	lddpc	r8,80000778 <ROSA_tcbUnsuspend+0x8c>
80000706:	30 09       	mov	r9,0
80000708:	91 09       	st.w	r8[0x0],r9
		SUSPENDEDLIST_end = NULL;
8000070a:	49 d8       	lddpc	r8,8000077c <ROSA_tcbUnsuspend+0x90>
8000070c:	30 09       	mov	r9,0
8000070e:	91 09       	st.w	r8[0x0],r9
80000710:	c3 08       	rjmp	80000770 <ROSA_tcbUnsuspend+0x84>
	}
	else
	{
		if(SUSPENDEDLIST_end == tcbTask)
80000712:	49 b8       	lddpc	r8,8000077c <ROSA_tcbUnsuspend+0x90>
80000714:	70 09       	ld.w	r9,r8[0x0]
80000716:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000071a:	10 39       	cp.w	r9,r8
8000071c:	c0 71       	brne	8000072a <ROSA_tcbUnsuspend+0x3e>
		{
			SUSPENDEDLIST_end = tcbTask->prevtcb;
8000071e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000722:	71 c9       	ld.w	r9,r8[0x70]
80000724:	49 68       	lddpc	r8,8000077c <ROSA_tcbUnsuspend+0x90>
80000726:	91 09       	st.w	r8[0x0],r9
80000728:	c0 c8       	rjmp	80000740 <ROSA_tcbUnsuspend+0x54>
		}
		else if(SUSPENDEDLIST == tcbTask)
8000072a:	49 48       	lddpc	r8,80000778 <ROSA_tcbUnsuspend+0x8c>
8000072c:	70 09       	ld.w	r9,r8[0x0]
8000072e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000732:	10 39       	cp.w	r9,r8
80000734:	c0 61       	brne	80000740 <ROSA_tcbUnsuspend+0x54>
		{
			SUSPENDEDLIST = tcbTask->nexttcb;
80000736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000073a:	70 09       	ld.w	r9,r8[0x0]
8000073c:	48 f8       	lddpc	r8,80000778 <ROSA_tcbUnsuspend+0x8c>
8000073e:	91 09       	st.w	r8[0x0],r9
		}
	
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
80000740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000744:	71 c8       	ld.w	r8,r8[0x70]
80000746:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000074a:	72 09       	ld.w	r9,r9[0x0]
8000074c:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
8000074e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000752:	70 08       	ld.w	r8,r8[0x0]
80000754:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000758:	73 c9       	ld.w	r9,r9[0x70]
8000075a:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
8000075e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000762:	30 09       	mov	r9,0
80000764:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
80000766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000076a:	30 09       	mov	r9,0
8000076c:	f1 49 00 70 	st.w	r8[112],r9
	}
}
80000770:	2f fd       	sub	sp,-4
80000772:	e3 cd 80 80 	ldm	sp++,r7,pc
80000776:	00 00       	add	r0,r0
80000778:	00 00       	add	r0,r0
8000077a:	05 58       	ld.sh	r8,--r2
8000077c:	00 00       	add	r0,r0
8000077e:	05 64       	ld.uh	r4,--r2

80000780 <ROSA_taskCreate>:
		//TCBLIST = tcbTask;
	//}
//}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * th, char * id, void * taskFunc, uint32_t stackSize, uint8_t priority)
{
80000780:	eb cd 40 80 	pushm	r7,lr
80000784:	1a 97       	mov	r7,sp
80000786:	20 7d       	sub	sp,28
80000788:	ef 4c ff f4 	st.w	r7[-12],r12
8000078c:	ef 4b ff f0 	st.w	r7[-16],r11
80000790:	ef 4a ff ec 	st.w	r7[-20],r10
80000794:	ef 49 ff e8 	st.w	r7[-24],r9
80000798:	ef 68 ff e4 	st.b	r7[-28],r8
	int16_t result = -1;
8000079c:	3f f8       	mov	r8,-1
8000079e:	ef 58 ff fa 	st.h	r7[-6],r8
	
	(*th) = (tcb*)calloc(1,sizeof(tcb));
800007a2:	37 4b       	mov	r11,116
800007a4:	30 1c       	mov	r12,1
800007a6:	f0 1f 00 22 	mcall	8000082c <ROSA_taskCreate+0xac>
800007aa:	18 98       	mov	r8,r12
800007ac:	10 99       	mov	r9,r8
800007ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007b2:	91 09       	st.w	r8[0x0],r9
	int* dynamic_stack = (int*)calloc(stackSize, sizeof(int));
800007b4:	30 4b       	mov	r11,4
800007b6:	ee fc ff e8 	ld.w	r12,r7[-24]
800007ba:	f0 1f 00 1d 	mcall	8000082c <ROSA_taskCreate+0xac>
800007be:	18 98       	mov	r8,r12
800007c0:	ef 48 ff fc 	st.w	r7[-4],r8
	(*th)->priority = priority;
800007c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007c8:	70 09       	ld.w	r9,r8[0x0]
800007ca:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800007ce:	f3 68 00 64 	st.b	r9[100],r8
	(*th)->effective_priority = priority;
800007d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007d6:	70 09       	ld.w	r9,r8[0x0]
800007d8:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800007dc:	f3 68 00 65 	st.b	r9[101],r8
	(*th)->status = 1;
800007e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007e4:	70 09       	ld.w	r9,r8[0x0]
800007e6:	30 18       	mov	r8,1
800007e8:	f3 68 00 66 	st.b	r9[102],r8
	(*th)->back_online_time = 0;
800007ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007f0:	70 0a       	ld.w	r10,r8[0x0]
800007f2:	30 08       	mov	r8,0
800007f4:	30 09       	mov	r9,0
800007f6:	f4 e9 00 68 	st.d	r10[104],r8
		
	ROSA_tcbCreate(*th, id, taskFunc, dynamic_stack, stackSize);
800007fa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800007fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000802:	72 0c       	ld.w	r12,r9[0x0]
80000804:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000808:	ee fa ff ec 	ld.w	r10,r7[-20]
8000080c:	ee fb ff f0 	ld.w	r11,r7[-16]
80000810:	f0 1f 00 08 	mcall	80000830 <ROSA_taskCreate+0xb0>
	ROSA_tcbInstall(*th);
80000814:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000818:	70 08       	ld.w	r8,r8[0x0]
8000081a:	10 9c       	mov	r12,r8
8000081c:	f0 1f 00 06 	mcall	80000834 <ROSA_taskCreate+0xb4>
	
	return result;
80000820:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000824:	10 9c       	mov	r12,r8
80000826:	2f 9d       	sub	sp,-28
80000828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000082c:	80 00       	ld.sh	r0,r0[0x0]
8000082e:	12 e4       	st.h	--r9,r4
80000830:	80 00       	ld.sh	r0,r0[0x0]
80000832:	04 58       	eor	r8,r2
80000834:	80 00       	ld.sh	r0,r0[0x0]
80000836:	05 0c       	ld.w	r12,r2++

80000838 <ROSA_taskDelete>:

int16_t ROSA_taskDelete(ROSA_taskHandle_t th)
{
80000838:	eb cd 40 80 	pushm	r7,lr
8000083c:	1a 97       	mov	r7,sp
8000083e:	20 2d       	sub	sp,8
80000840:	ef 4c ff f8 	st.w	r7[-8],r12
	uint16_t result = -1;
80000844:	3f f8       	mov	r8,-1
80000846:	ef 58 ff fe 	st.h	r7[-2],r8
		
	if( th )
8000084a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000084e:	58 08       	cp.w	r8,0
80000850:	c3 a0       	breq	800008c4 <ROSA_taskDelete+0x8c>
		//{
			//TCBLIST_end = NULL;
			//TCBLIST_end = NULL;
		//}
		
		if(TCBLIST_end == th)
80000852:	4a 08       	lddpc	r8,800008d0 <ROSA_taskDelete+0x98>
80000854:	70 09       	ld.w	r9,r8[0x0]
80000856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000085a:	10 39       	cp.w	r9,r8
8000085c:	c0 61       	brne	80000868 <ROSA_taskDelete+0x30>
		{
			TCBLIST_end = th->prevtcb;
8000085e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000862:	71 c9       	ld.w	r9,r8[0x70]
80000864:	49 b8       	lddpc	r8,800008d0 <ROSA_taskDelete+0x98>
80000866:	91 09       	st.w	r8[0x0],r9
		}
		if(TCBLIST == th)
80000868:	49 b8       	lddpc	r8,800008d4 <ROSA_taskDelete+0x9c>
8000086a:	70 09       	ld.w	r9,r8[0x0]
8000086c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000870:	10 39       	cp.w	r9,r8
80000872:	c0 61       	brne	8000087e <ROSA_taskDelete+0x46>
		{
			TCBLIST = th->nexttcb;
80000874:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000878:	70 09       	ld.w	r9,r8[0x0]
8000087a:	49 78       	lddpc	r8,800008d4 <ROSA_taskDelete+0x9c>
8000087c:	91 09       	st.w	r8[0x0],r9
		}
		
		th->prevtcb->nexttcb = th->nexttcb;
8000087e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000882:	71 c8       	ld.w	r8,r8[0x70]
80000884:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000888:	72 09       	ld.w	r9,r9[0x0]
8000088a:	91 09       	st.w	r8[0x0],r9
		th->nexttcb->prevtcb = th->prevtcb;
8000088c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000890:	70 08       	ld.w	r8,r8[0x0]
80000892:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000896:	73 c9       	ld.w	r9,r9[0x70]
80000898:	f1 49 00 70 	st.w	r8[112],r9
		
		free(th->dataarea - th->datasize);
8000089c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008a0:	70 39       	ld.w	r9,r8[0xc]
800008a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008a6:	70 48       	ld.w	r8,r8[0x10]
800008a8:	a3 68       	lsl	r8,0x2
800008aa:	5c 38       	neg	r8
800008ac:	f2 08 00 08 	add	r8,r9,r8
800008b0:	10 9c       	mov	r12,r8
800008b2:	f0 1f 00 0a 	mcall	800008d8 <ROSA_taskDelete+0xa0>
		free(th);
800008b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800008ba:	f0 1f 00 08 	mcall	800008d8 <ROSA_taskDelete+0xa0>
		
		result = 0;
800008be:	30 08       	mov	r8,0
800008c0:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	
	return result;
800008c4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800008c8:	10 9c       	mov	r12,r8
800008ca:	2f ed       	sub	sp,-8
800008cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800008d0:	00 00       	add	r0,r0
800008d2:	05 60       	ld.uh	r0,--r2
800008d4:	00 00       	add	r0,r0
800008d6:	05 50       	ld.sh	r0,--r2
800008d8:	80 00       	ld.sh	r0,r0[0x0]
800008da:	13 5c       	ld.sh	r12,--r9

800008dc <ROSA_delay>:


int16_t ROSA_delay(uint64_t ticks)
{
800008dc:	eb cd 40 c0 	pushm	r6-r7,lr
800008e0:	1a 97       	mov	r7,sp
800008e2:	20 2d       	sub	sp,8
800008e4:	ee eb ff f8 	st.d	r7[-8],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
800008e8:	f0 1f 00 12 	mcall	80000930 <ROSA_delay+0x54>
	ROSA_tcbUninstall(EXECTASK);
800008ec:	49 28       	lddpc	r8,80000934 <ROSA_delay+0x58>
800008ee:	70 08       	ld.w	r8,r8[0x0]
800008f0:	10 9c       	mov	r12,r8
800008f2:	f0 1f 00 12 	mcall	80000938 <ROSA_delay+0x5c>
	EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
800008f6:	49 08       	lddpc	r8,80000934 <ROSA_delay+0x58>
800008f8:	70 06       	ld.w	r6,r8[0x0]
800008fa:	f0 1f 00 11 	mcall	8000093c <ROSA_delay+0x60>
800008fe:	14 98       	mov	r8,r10
80000900:	16 99       	mov	r9,r11
80000902:	10 9a       	mov	r10,r8
80000904:	12 9b       	mov	r11,r9
80000906:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000090a:	f4 08 00 08 	add	r8,r10,r8
8000090e:	f6 09 00 49 	adc	r9,r11,r9
80000912:	ec e9 00 68 	st.d	r6[104],r8
	ROSA_tcbSuspend(EXECTASK);
80000916:	48 88       	lddpc	r8,80000934 <ROSA_delay+0x58>
80000918:	70 08       	ld.w	r8,r8[0x0]
8000091a:	10 9c       	mov	r12,r8
8000091c:	f0 1f 00 09 	mcall	80000940 <ROSA_delay+0x64>
	interruptEnable();
80000920:	f0 1f 00 09 	mcall	80000944 <ROSA_delay+0x68>
	ROSA_yield();
80000924:	f0 1f 00 09 	mcall	80000948 <ROSA_delay+0x6c>
}
80000928:	2f ed       	sub	sp,-8
8000092a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000092e:	00 00       	add	r0,r0
80000930:	80 00       	ld.sh	r0,r0[0x0]
80000932:	1d 66       	ld.uh	r6,--lr
80000934:	00 00       	add	r0,r0
80000936:	05 7c       	ld.ub	r12,--r2
80000938:	80 00       	ld.sh	r0,r0[0x0]
8000093a:	05 b0       	ld.ub	r0,r2[0x3]
8000093c:	80 00       	ld.sh	r0,r0[0x0]
8000093e:	0b a4       	ld.ub	r4,r5[0x2]
80000940:	80 00       	ld.sh	r0,r0[0x0]
80000942:	06 44       	or	r4,r3
80000944:	80 00       	ld.sh	r0,r0[0x0]
80000946:	1d 6a       	ld.uh	r10,--lr
80000948:	80 00       	ld.sh	r0,r0[0x0]
8000094a:	0a 0e       	add	lr,r5

8000094c <ROSA_start>:
8000094c:	4b 5c       	lddpc	r12,80000a20 <_yield+0xa>
8000094e:	4b 6b       	lddpc	r11,80000a24 <_yield+0xe>
80000950:	78 0c       	ld.w	r12,r12[0x0]
80000952:	97 0c       	st.w	r11[0x0],r12
80000954:	78 50       	ld.w	r0,r12[0x14]
80000956:	1a d0       	st.w	--sp,r0
80000958:	e5 cd 20 00 	ldmts	sp,sp
8000095c:	1b 00       	ld.w	r0,sp++
8000095e:	78 2e       	ld.w	lr,r12[0x8]
80000960:	78 80       	ld.w	r0,r12[0x20]
80000962:	e3 b0 00 00 	mtsr	0x0,r0
80000966:	79 80       	ld.w	r0,r12[0x60]
80000968:	79 71       	ld.w	r1,r12[0x5c]
8000096a:	79 62       	ld.w	r2,r12[0x58]
8000096c:	79 53       	ld.w	r3,r12[0x54]
8000096e:	79 44       	ld.w	r4,r12[0x50]
80000970:	79 35       	ld.w	r5,r12[0x4c]
80000972:	79 26       	ld.w	r6,r12[0x48]
80000974:	79 17       	ld.w	r7,r12[0x44]
80000976:	79 08       	ld.w	r8,r12[0x40]
80000978:	78 f9       	ld.w	r9,r12[0x3c]
8000097a:	78 ea       	ld.w	r10,r12[0x38]
8000097c:	78 db       	ld.w	r11,r12[0x34]
8000097e:	78 cc       	ld.w	r12,r12[0x30]
80000980:	1c 9f       	mov	pc,lr

80000982 <contextInit>:
80000982:	78 20       	ld.w	r0,r12[0x8]
80000984:	99 a0       	st.w	r12[0x28],r0
80000986:	30 00       	mov	r0,0
80000988:	f9 40 00 60 	st.w	r12[96],r0
8000098c:	f9 40 00 5c 	st.w	r12[92],r0
80000990:	f9 40 00 58 	st.w	r12[88],r0
80000994:	f9 40 00 54 	st.w	r12[84],r0
80000998:	f9 40 00 50 	st.w	r12[80],r0
8000099c:	f9 40 00 4c 	st.w	r12[76],r0
800009a0:	f9 40 00 48 	st.w	r12[72],r0
800009a4:	f9 40 00 44 	st.w	r12[68],r0
800009a8:	f9 40 00 40 	st.w	r12[64],r0
800009ac:	99 f0       	st.w	r12[0x3c],r0
800009ae:	99 e0       	st.w	r12[0x38],r0
800009b0:	99 d0       	st.w	r12[0x34],r0
800009b2:	99 c0       	st.w	r12[0x30],r0
800009b4:	1c 9f       	mov	pc,lr

800009b6 <contextSave>:
800009b6:	d2 01       	pushm	r12
800009b8:	49 bc       	lddpc	r12,80000a24 <_yield+0xe>
800009ba:	78 0c       	ld.w	r12,r12[0x0]
800009bc:	99 60       	st.w	r12[0x18],r0
800009be:	99 71       	st.w	r12[0x1c],r1
800009c0:	1b 00       	ld.w	r0,sp++
800009c2:	99 c0       	st.w	r12[0x30],r0
800009c4:	7a 00       	ld.w	r0,sp[0x0]
800009c6:	99 80       	st.w	r12[0x20],r0
800009c8:	33 40       	mov	r0,52
800009ca:	18 00       	add	r0,r12
800009cc:	ed c0 0f ff 	stmts	r0,r0-r11
800009d0:	1a 90       	mov	r0,sp
800009d2:	1a d0       	st.w	--sp,r0
800009d4:	ed cd 20 00 	stmts	sp,sp
800009d8:	1b 01       	ld.w	r1,sp++
800009da:	62 00       	ld.w	r0,r1[0x0]
800009dc:	99 90       	st.w	r12[0x24],r0
800009de:	99 a0       	st.w	r12[0x28],r0
800009e0:	2f c1       	sub	r1,-4
800009e2:	99 51       	st.w	r12[0x14],r1
800009e4:	1c 9f       	mov	pc,lr

800009e6 <contextRestore>:
800009e6:	49 0c       	lddpc	r12,80000a24 <_yield+0xe>
800009e8:	78 0c       	ld.w	r12,r12[0x0]
800009ea:	78 51       	ld.w	r1,r12[0x14]
800009ec:	1a d1       	st.w	--sp,r1
800009ee:	e5 cd 20 00 	ldmts	sp,sp
800009f2:	1b 01       	ld.w	r1,sp++
800009f4:	78 ae       	ld.w	lr,r12[0x28]
800009f6:	78 90       	ld.w	r0,r12[0x24]
800009f8:	9b 10       	st.w	sp[0x4],r0
800009fa:	33 40       	mov	r0,52
800009fc:	18 00       	add	r0,r12
800009fe:	e5 c0 0f ff 	ldmts	r0,r0-r11
80000a02:	78 80       	ld.w	r0,r12[0x20]
80000a04:	9b 00       	st.w	sp[0x0],r0
80000a06:	78 60       	ld.w	r0,r12[0x18]
80000a08:	78 71       	ld.w	r1,r12[0x1c]
80000a0a:	78 cc       	ld.w	r12,r12[0x30]
80000a0c:	d6 13       	rets

80000a0e <ROSA_yield>:
80000a0e:	d4 01       	pushm	lr
80000a10:	fe ce ff fa 	sub	lr,pc,-6
80000a14:	d7 33       	scall

80000a16 <_yield>:
80000a16:	cd 0f       	rcall	800009b6 <contextSave>
80000a18:	f0 1f 00 04 	mcall	80000a28 <_yield+0x12>
80000a1c:	ce 5f       	rcall	800009e6 <contextRestore>
80000a1e:	00 00       	add	r0,r0
80000a20:	00 00       	add	r0,r0
80000a22:	05 50       	ld.sh	r0,--r2
80000a24:	00 00       	add	r0,r0
80000a26:	05 7c       	ld.ub	r12,--r2
80000a28:	80 00       	ld.sh	r0,r0[0x0]
80000a2a:	0a 2c       	rsub	r12,r5

80000a2c <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000a2c:	eb cd 40 80 	pushm	r7,lr
80000a30:	1a 97       	mov	r7,sp
80000a32:	20 3d       	sub	sp,12
	
	tcb * iterator = SUSPENDEDLIST;
80000a34:	49 b8       	lddpc	r8,80000aa0 <scheduler+0x74>
80000a36:	70 08       	ld.w	r8,r8[0x0]
80000a38:	ef 48 ff f4 	st.w	r7[-12],r8
	uint64_t current_time = ROSA_getTickCount();
80000a3c:	f0 1f 00 1a 	mcall	80000aa4 <scheduler+0x78>
80000a40:	14 98       	mov	r8,r10
80000a42:	16 99       	mov	r9,r11
80000a44:	ee e9 ff f8 	st.d	r7[-8],r8
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000a48:	c1 68       	rjmp	80000a74 <scheduler+0x48>
	{
		ROSA_tcbUnsuspend(iterator);
80000a4a:	ee fc ff f4 	ld.w	r12,r7[-12]
80000a4e:	f0 1f 00 17 	mcall	80000aa8 <scheduler+0x7c>
		ROSA_tcbInstall(iterator);
80000a52:	ee fc ff f4 	ld.w	r12,r7[-12]
80000a56:	f0 1f 00 16 	mcall	80000aac <scheduler+0x80>
		if (SUSPENDEDLIST)
80000a5a:	49 28       	lddpc	r8,80000aa0 <scheduler+0x74>
80000a5c:	70 08       	ld.w	r8,r8[0x0]
80000a5e:	58 08       	cp.w	r8,0
80000a60:	c0 70       	breq	80000a6e <scheduler+0x42>
		{
			iterator = iterator->nexttcb;
80000a62:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a66:	70 08       	ld.w	r8,r8[0x0]
80000a68:	ef 48 ff f4 	st.w	r7[-12],r8
80000a6c:	c0 48       	rjmp	80000a74 <scheduler+0x48>
		}
		else
		{
			iterator = NULL;
80000a6e:	30 08       	mov	r8,0
80000a70:	ef 48 ff f4 	st.w	r7[-12],r8
void scheduler(void)
{
	
	tcb * iterator = SUSPENDEDLIST;
	uint64_t current_time = ROSA_getTickCount();
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000a74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a78:	58 08       	cp.w	r8,0
80000a7a:	c0 c0       	breq	80000a92 <scheduler+0x66>
80000a7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a80:	f0 ea 00 68 	ld.d	r10,r8[104]
80000a84:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000a88:	10 3a       	cp.w	r10,r8
80000a8a:	f2 0b 13 00 	cpc	r11,r9
80000a8e:	fe 98 ff de 	brls	80000a4a <scheduler+0x1e>
			iterator = NULL;
		}
	}
	//Find the next task to execute
	//EXECTASK = EXECTASK->nexttcb;
	EXECTASK=TCBLIST;
80000a92:	48 88       	lddpc	r8,80000ab0 <scheduler+0x84>
80000a94:	70 09       	ld.w	r9,r8[0x0]
80000a96:	48 88       	lddpc	r8,80000ab4 <scheduler+0x88>
80000a98:	91 09       	st.w	r8[0x0],r9
	
}
80000a9a:	2f dd       	sub	sp,-12
80000a9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aa0:	00 00       	add	r0,r0
80000aa2:	05 58       	ld.sh	r8,--r2
80000aa4:	80 00       	ld.sh	r0,r0[0x0]
80000aa6:	0b a4       	ld.ub	r4,r5[0x2]
80000aa8:	80 00       	ld.sh	r0,r0[0x0]
80000aaa:	06 ec       	st.h	--r3,r12
80000aac:	80 00       	ld.sh	r0,r0[0x0]
80000aae:	05 0c       	ld.w	r12,r2++
80000ab0:	00 00       	add	r0,r0
80000ab2:	05 50       	ld.sh	r0,--r2
80000ab4:	00 00       	add	r0,r0
80000ab6:	05 7c       	ld.ub	r12,--r2

80000ab8 <C.0.9448>:
80000ab8:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000ac8 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000ac8:	eb cd 40 80 	pushm	r7,lr
80000acc:	1a 97       	mov	r7,sp
80000ace:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000ad0:	fe 78 38 00 	mov	r8,-51200
80000ad4:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000adc:	70 88       	ld.w	r8,r8[0x20]
80000ade:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80000ae2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ae6:	e2 18 00 10 	andl	r8,0x10,COH
80000aea:	c0 30       	breq	80000af0 <timerISR+0x28>
	{
		ROSA_yieldFromISR();
80000aec:	f0 1f 00 03 	mcall	80000af8 <timerISR+0x30>
	}
}
80000af0:	2f ed       	sub	sp,-8
80000af2:	e3 cd 40 80 	ldm	sp++,r7,lr
80000af6:	d6 03       	rete
80000af8:	80 00       	ld.sh	r0,r0[0x0]
80000afa:	03 7c       	ld.ub	r12,--r1

80000afc <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000afc:	eb cd 40 80 	pushm	r7,lr
80000b00:	1a 97       	mov	r7,sp
80000b02:	20 7d       	sub	sp,28
80000b04:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000b08:	4a 48       	lddpc	r8,80000b98 <timerPeriodSet+0x9c>
80000b0a:	ee ca 00 18 	sub	r10,r7,24
80000b0e:	10 9b       	mov	r11,r8
80000b10:	f6 e8 00 00 	ld.d	r8,r11[0]
80000b14:	f4 e9 00 00 	st.d	r10[0],r8
80000b18:	f6 e8 00 08 	ld.d	r8,r11[8]
80000b1c:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000b20:	30 48       	mov	r8,4
80000b22:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000b26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b2a:	20 18       	sub	r8,1
80000b2c:	a3 68       	lsl	r8,0x2
80000b2e:	ee 08 00 08 	add	r8,r7,r8
80000b32:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000b36:	e0 68 1b 00 	mov	r8,6912
80000b3a:	ea 18 00 b7 	orh	r8,0xb7
80000b3e:	f0 09 0c 08 	divs	r8,r8,r9
80000b42:	10 99       	mov	r9,r8
80000b44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b48:	b1 39       	mul	r9,r8
80000b4a:	e0 68 4d d3 	mov	r8,19923
80000b4e:	ea 18 10 62 	orh	r8,0x1062
80000b52:	f2 08 06 48 	mulu.d	r8,r9,r8
80000b56:	f2 08 16 06 	lsr	r8,r9,0x6
80000b5a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000b5e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b62:	f0 1f 00 0f 	mcall	80000b9c <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000b66:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b6a:	f0 1f 00 0e 	mcall	80000ba0 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000b6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b76:	f2 08 02 4a 	mul	r10,r9,r8
80000b7a:	e0 68 9f 81 	mov	r8,40833
80000b7e:	ea 18 16 5e 	orh	r8,0x165e
80000b82:	f4 08 04 48 	muls.d	r8,r10,r8
80000b86:	b5 49       	asr	r9,0x14
80000b88:	f4 08 14 1f 	asr	r8,r10,0x1f
80000b8c:	f2 08 01 08 	sub	r8,r9,r8
}
80000b90:	10 9c       	mov	r12,r8
80000b92:	2f 9d       	sub	sp,-28
80000b94:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b98:	80 00       	ld.sh	r0,r0[0x0]
80000b9a:	0a b8       	st.h	r5++,r8
80000b9c:	80 00       	ld.sh	r0,r0[0x0]
80000b9e:	12 20       	rsub	r0,r9
80000ba0:	80 00       	ld.sh	r0,r0[0x0]
80000ba2:	12 0a       	add	r10,r9

80000ba4 <ROSA_getTickCount>:
 * Comment:
 * 	returns the current number of system ticks since start.
 *
 **********************************************************/
int64_t ROSA_getTickCount(void)
{
80000ba4:	eb cd 40 80 	pushm	r7,lr
80000ba8:	1a 97       	mov	r7,sp
	return system_ticks;
80000baa:	48 48       	lddpc	r8,80000bb8 <ROSA_getTickCount+0x14>
80000bac:	f0 e8 00 00 	ld.d	r8,r8[0]
80000bb0:	10 9a       	mov	r10,r8
80000bb2:	12 9b       	mov	r11,r9
80000bb4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bb8:	00 00       	add	r0,r0
80000bba:	05 68       	ld.uh	r8,--r2

80000bbc <buttonInit>:
80000bbc:	eb cd 40 80 	pushm	r7,lr
80000bc0:	1a 97       	mov	r7,sp
80000bc2:	30 1b       	mov	r11,1
80000bc4:	35 8c       	mov	r12,88
80000bc6:	f0 1f 00 07 	mcall	80000be0 <buttonInit+0x24>
80000bca:	30 1b       	mov	r11,1
80000bcc:	35 5c       	mov	r12,85
80000bce:	f0 1f 00 05 	mcall	80000be0 <buttonInit+0x24>
80000bd2:	30 1b       	mov	r11,1
80000bd4:	35 2c       	mov	r12,82
80000bd6:	f0 1f 00 03 	mcall	80000be0 <buttonInit+0x24>
80000bda:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bde:	00 00       	add	r0,r0
80000be0:	80 00       	ld.sh	r0,r0[0x0]
80000be2:	0c 50       	eor	r0,r6

80000be4 <joystickInit>:
80000be4:	eb cd 40 80 	pushm	r7,lr
80000be8:	1a 97       	mov	r7,sp
80000bea:	30 1b       	mov	r11,1
80000bec:	31 bc       	mov	r12,27
80000bee:	f0 1f 00 0b 	mcall	80000c18 <joystickInit+0x34>
80000bf2:	30 1b       	mov	r11,1
80000bf4:	31 9c       	mov	r12,25
80000bf6:	f0 1f 00 09 	mcall	80000c18 <joystickInit+0x34>
80000bfa:	30 1b       	mov	r11,1
80000bfc:	31 cc       	mov	r12,28
80000bfe:	f0 1f 00 07 	mcall	80000c18 <joystickInit+0x34>
80000c02:	30 1b       	mov	r11,1
80000c04:	31 4c       	mov	r12,20
80000c06:	f0 1f 00 05 	mcall	80000c18 <joystickInit+0x34>
80000c0a:	30 1b       	mov	r11,1
80000c0c:	31 ac       	mov	r12,26
80000c0e:	f0 1f 00 03 	mcall	80000c18 <joystickInit+0x34>
80000c12:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c16:	00 00       	add	r0,r0
80000c18:	80 00       	ld.sh	r0,r0[0x0]
80000c1a:	0c 50       	eor	r0,r6

80000c1c <delay_ms>:
80000c1c:	eb cd 40 80 	pushm	r7,lr
80000c20:	1a 97       	mov	r7,sp
80000c22:	20 2d       	sub	sp,8
80000c24:	ef 4c ff f8 	st.w	r7[-8],r12
80000c28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c2c:	e0 69 04 42 	mov	r9,1090
80000c30:	b3 38       	mul	r8,r9
80000c32:	ef 48 ff fc 	st.w	r7[-4],r8
80000c36:	c0 68       	rjmp	80000c42 <delay_ms+0x26>
80000c38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c3c:	20 18       	sub	r8,1
80000c3e:	ef 48 ff fc 	st.w	r7[-4],r8
80000c42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c46:	58 08       	cp.w	r8,0
80000c48:	cf 81       	brne	80000c38 <delay_ms+0x1c>
80000c4a:	2f ed       	sub	sp,-8
80000c4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c50 <gpioInit>:
80000c50:	eb cd 40 80 	pushm	r7,lr
80000c54:	1a 97       	mov	r7,sp
80000c56:	20 7d       	sub	sp,28
80000c58:	ef 4c ff ec 	st.w	r7[-20],r12
80000c5c:	ef 4b ff e8 	st.w	r7[-24],r11
80000c60:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c64:	a5 58       	asr	r8,0x5
80000c66:	ef 48 ff f4 	st.w	r7[-12],r8
80000c6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c72:	ef 48 ff fc 	st.w	r7[-4],r8
80000c76:	30 19       	mov	r9,1
80000c78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c7c:	f2 08 09 48 	lsl	r8,r9,r8
80000c80:	ef 48 ff f8 	st.w	r7[-8],r8
80000c84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c88:	a9 68       	lsl	r8,0x8
80000c8a:	e0 28 f0 00 	sub	r8,61440
80000c8e:	ef 48 ff f0 	st.w	r7[-16],r8
80000c92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c9a:	91 19       	st.w	r8[0x4],r9
80000c9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ca0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ca4:	91 69       	st.w	r8[0x18],r9
80000ca6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000caa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cae:	91 a9       	st.w	r8[0x28],r9
80000cb0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000cb4:	ef 48 ff e4 	st.w	r7[-28],r8
80000cb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000cbc:	58 08       	cp.w	r8,0
80000cbe:	c0 60       	breq	80000cca <gpioInit+0x7a>
80000cc0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000cc4:	58 18       	cp.w	r8,1
80000cc6:	c0 90       	breq	80000cd8 <gpioInit+0x88>
80000cc8:	c0 f8       	rjmp	80000ce6 <gpioInit+0x96>
80000cca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cce:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cd2:	f1 49 00 44 	st.w	r8[68],r9
80000cd6:	c0 e8       	rjmp	80000cf2 <gpioInit+0xa2>
80000cd8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cdc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ce0:	f1 49 00 48 	st.w	r8[72],r9
80000ce4:	c0 78       	rjmp	80000cf2 <gpioInit+0xa2>
80000ce6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cee:	f1 49 00 48 	st.w	r8[72],r9
80000cf2:	2f 9d       	sub	sp,-28
80000cf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000cf8 <gpioClear>:
80000cf8:	eb cd 40 80 	pushm	r7,lr
80000cfc:	1a 97       	mov	r7,sp
80000cfe:	20 5d       	sub	sp,20
80000d00:	ef 4c ff ec 	st.w	r7[-20],r12
80000d04:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d08:	a5 58       	asr	r8,0x5
80000d0a:	ef 48 ff f4 	st.w	r7[-12],r8
80000d0e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d12:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d16:	ef 48 ff fc 	st.w	r7[-4],r8
80000d1a:	30 19       	mov	r9,1
80000d1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d20:	f2 08 09 48 	lsl	r8,r9,r8
80000d24:	ef 48 ff f8 	st.w	r7[-8],r8
80000d28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d2c:	a9 68       	lsl	r8,0x8
80000d2e:	e0 28 f0 00 	sub	r8,61440
80000d32:	ef 48 ff f0 	st.w	r7[-16],r8
80000d36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d3e:	f1 49 00 58 	st.w	r8[88],r9
80000d42:	2f bd       	sub	sp,-20
80000d44:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d48 <gpioSet>:
80000d48:	eb cd 40 80 	pushm	r7,lr
80000d4c:	1a 97       	mov	r7,sp
80000d4e:	20 5d       	sub	sp,20
80000d50:	ef 4c ff ec 	st.w	r7[-20],r12
80000d54:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d58:	a5 58       	asr	r8,0x5
80000d5a:	ef 48 ff f4 	st.w	r7[-12],r8
80000d5e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d66:	ef 48 ff fc 	st.w	r7[-4],r8
80000d6a:	30 19       	mov	r9,1
80000d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d70:	f2 08 09 48 	lsl	r8,r9,r8
80000d74:	ef 48 ff f8 	st.w	r7[-8],r8
80000d78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d7c:	a9 68       	lsl	r8,0x8
80000d7e:	e0 28 f0 00 	sub	r8,61440
80000d82:	ef 48 ff f0 	st.w	r7[-16],r8
80000d86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d8e:	f1 49 00 54 	st.w	r8[84],r9
80000d92:	2f bd       	sub	sp,-20
80000d94:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d98 <gpioToggle>:
80000d98:	eb cd 40 80 	pushm	r7,lr
80000d9c:	1a 97       	mov	r7,sp
80000d9e:	20 5d       	sub	sp,20
80000da0:	ef 4c ff ec 	st.w	r7[-20],r12
80000da4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000da8:	a5 58       	asr	r8,0x5
80000daa:	ef 48 ff f4 	st.w	r7[-12],r8
80000dae:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000db2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000db6:	ef 48 ff fc 	st.w	r7[-4],r8
80000dba:	30 19       	mov	r9,1
80000dbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dc0:	f2 08 09 48 	lsl	r8,r9,r8
80000dc4:	ef 48 ff f8 	st.w	r7[-8],r8
80000dc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000dcc:	a9 68       	lsl	r8,0x8
80000dce:	e0 28 f0 00 	sub	r8,61440
80000dd2:	ef 48 ff f0 	st.w	r7[-16],r8
80000dd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dde:	f1 49 00 5c 	st.w	r8[92],r9
80000de2:	2f bd       	sub	sp,-20
80000de4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000de8 <ledInit>:
80000de8:	eb cd 40 80 	pushm	r7,lr
80000dec:	1a 97       	mov	r7,sp
80000dee:	20 9d       	sub	sp,36
80000df0:	49 e8       	lddpc	r8,80000e68 <ledInit+0x80>
80000df2:	ee cb 00 24 	sub	r11,r7,36
80000df6:	10 9a       	mov	r10,r8
80000df8:	f4 e8 00 00 	ld.d	r8,r10[0]
80000dfc:	f6 e9 00 00 	st.d	r11[0],r8
80000e00:	f4 e8 00 08 	ld.d	r8,r10[8]
80000e04:	f6 e9 00 08 	st.d	r11[8],r8
80000e08:	f4 e8 00 10 	ld.d	r8,r10[16]
80000e0c:	f6 e9 00 10 	st.d	r11[16],r8
80000e10:	f4 e8 00 18 	ld.d	r8,r10[24]
80000e14:	f6 e9 00 18 	st.d	r11[24],r8
80000e18:	30 08       	mov	r8,0
80000e1a:	ef 48 ff fc 	st.w	r7[-4],r8
80000e1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e22:	a3 68       	lsl	r8,0x2
80000e24:	ee 08 00 08 	add	r8,r7,r8
80000e28:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000e2c:	10 9c       	mov	r12,r8
80000e2e:	f0 1f 00 10 	mcall	80000e6c <ledInit+0x84>
80000e32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e36:	a3 68       	lsl	r8,0x2
80000e38:	ee 08 00 08 	add	r8,r7,r8
80000e3c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000e40:	30 0b       	mov	r11,0
80000e42:	10 9c       	mov	r12,r8
80000e44:	f0 1f 00 0b 	mcall	80000e70 <ledInit+0x88>
80000e48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e4c:	58 78       	cp.w	r8,7
80000e4e:	5f 18       	srne	r8
80000e50:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000e54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e58:	2f f8       	sub	r8,-1
80000e5a:	ef 48 ff fc 	st.w	r7[-4],r8
80000e5e:	58 09       	cp.w	r9,0
80000e60:	cd f1       	brne	80000e1e <ledInit+0x36>
80000e62:	2f 7d       	sub	sp,-36
80000e64:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e68:	80 00       	ld.sh	r0,r0[0x0]
80000e6a:	20 00       	sub	r0,0
80000e6c:	80 00       	ld.sh	r0,r0[0x0]
80000e6e:	0e 94       	mov	r4,r7
80000e70:	80 00       	ld.sh	r0,r0[0x0]
80000e72:	0c 50       	eor	r0,r6

80000e74 <ledOn>:
80000e74:	eb cd 40 80 	pushm	r7,lr
80000e78:	1a 97       	mov	r7,sp
80000e7a:	20 1d       	sub	sp,4
80000e7c:	ef 4c ff fc 	st.w	r7[-4],r12
80000e80:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e84:	f0 1f 00 03 	mcall	80000e90 <ledOn+0x1c>
80000e88:	2f fd       	sub	sp,-4
80000e8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e8e:	00 00       	add	r0,r0
80000e90:	80 00       	ld.sh	r0,r0[0x0]
80000e92:	0c f8       	st.b	--r6,r8

80000e94 <ledOff>:
80000e94:	eb cd 40 80 	pushm	r7,lr
80000e98:	1a 97       	mov	r7,sp
80000e9a:	20 1d       	sub	sp,4
80000e9c:	ef 4c ff fc 	st.w	r7[-4],r12
80000ea0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ea4:	f0 1f 00 03 	mcall	80000eb0 <ledOff+0x1c>
80000ea8:	2f fd       	sub	sp,-4
80000eaa:	e3 cd 80 80 	ldm	sp++,r7,pc
80000eae:	00 00       	add	r0,r0
80000eb0:	80 00       	ld.sh	r0,r0[0x0]
80000eb2:	0d 48       	ld.w	r8,--r6

80000eb4 <ledToggle>:
80000eb4:	eb cd 40 80 	pushm	r7,lr
80000eb8:	1a 97       	mov	r7,sp
80000eba:	20 1d       	sub	sp,4
80000ebc:	ef 4c ff fc 	st.w	r7[-4],r12
80000ec0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ec4:	f0 1f 00 03 	mcall	80000ed0 <ledToggle+0x1c>
80000ec8:	2f fd       	sub	sp,-4
80000eca:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ece:	00 00       	add	r0,r0
80000ed0:	80 00       	ld.sh	r0,r0[0x0]
80000ed2:	0d 98       	ld.ub	r8,r6[0x1]

80000ed4 <potInit>:
80000ed4:	d3 01       	pushm	r11-r12
80000ed6:	e0 6c 10 00 	mov	r12,4096
80000eda:	ea 1c ff ff 	orh	r12,0xffff
80000ede:	31 6b       	mov	r11,22
80000ee0:	99 2b       	st.w	r12[0x8],r11
80000ee2:	99 6b       	st.w	r12[0x18],r11
80000ee4:	99 6b       	st.w	r12[0x18],r11
80000ee6:	e0 6c 3c 00 	mov	r12,15360
80000eea:	ea 1c ff ff 	orh	r12,0xffff
80000eee:	30 1b       	mov	r11,1
80000ef0:	99 0b       	st.w	r12[0x0],r11
80000ef2:	e0 6b 0f 1f 	mov	r11,3871
80000ef6:	b1 6b       	lsl	r11,0x10
80000ef8:	99 1b       	st.w	r12[0x4],r11
80000efa:	30 2b       	mov	r11,2
80000efc:	99 4b       	st.w	r12[0x10],r11
80000efe:	d3 02       	popm	r11-r12
80000f00:	1c 9f       	mov	pc,lr

80000f02 <potGetValue>:
80000f02:	d1 81       	pushm	r10-r11
80000f04:	e0 6c 3c 00 	mov	r12,15360
80000f08:	ea 1c ff ff 	orh	r12,0xffff
80000f0c:	30 2b       	mov	r11,2
80000f0e:	99 0b       	st.w	r12[0x0],r11

80000f10 <a1>:
80000f10:	78 7a       	ld.w	r10,r12[0x1c]
80000f12:	16 7a       	tst	r10,r11
80000f14:	cf e0       	breq	80000f10 <a1>
80000f16:	78 dc       	ld.w	r12,r12[0x34]
80000f18:	d1 82       	popm	r10-r11
80000f1a:	1c 9f       	mov	pc,lr

80000f1c <usartReset>:
80000f1c:	eb cd 40 80 	pushm	r7,lr
80000f20:	1a 97       	mov	r7,sp
80000f22:	20 3d       	sub	sp,12
80000f24:	ef 4c ff f8 	st.w	r7[-8],r12
80000f28:	f0 1f 00 16 	mcall	80000f80 <usartReset+0x64>
80000f2c:	18 98       	mov	r8,r12
80000f2e:	ef 48 ff fc 	st.w	r7[-4],r8
80000f32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f36:	58 08       	cp.w	r8,0
80000f38:	c0 30       	breq	80000f3e <usartReset+0x22>
80000f3a:	f0 1f 00 13 	mcall	80000f84 <usartReset+0x68>
80000f3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f42:	3f f8       	mov	r8,-1
80000f44:	93 38       	st.w	r9[0xc],r8
80000f46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f4a:	70 58       	ld.w	r8,r8[0x14]
80000f4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f50:	58 08       	cp.w	r8,0
80000f52:	c0 30       	breq	80000f58 <usartReset+0x3c>
80000f54:	f0 1f 00 0d 	mcall	80000f88 <usartReset+0x6c>
80000f58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f5c:	30 08       	mov	r8,0
80000f5e:	93 18       	st.w	r9[0x4],r8
80000f60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f64:	30 08       	mov	r8,0
80000f66:	93 98       	st.w	r9[0x24],r8
80000f68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f6c:	30 08       	mov	r8,0
80000f6e:	93 a8       	st.w	r9[0x28],r8
80000f70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f74:	ea 68 61 0c 	mov	r8,680204
80000f78:	93 08       	st.w	r9[0x0],r8
80000f7a:	2f dd       	sub	sp,-12
80000f7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f80:	80 00       	ld.sh	r0,r0[0x0]
80000f82:	1d 6e       	ld.uh	lr,--lr
80000f84:	80 00       	ld.sh	r0,r0[0x0]
80000f86:	1d 66       	ld.uh	r6,--lr
80000f88:	80 00       	ld.sh	r0,r0[0x0]
80000f8a:	1d 6a       	ld.uh	r10,--lr

80000f8c <usartSetBaudrate>:
80000f8c:	eb cd 40 80 	pushm	r7,lr
80000f90:	1a 97       	mov	r7,sp
80000f92:	20 bd       	sub	sp,44
80000f94:	ef 4c ff ec 	st.w	r7[-20],r12
80000f98:	ef 4b ff e8 	st.w	r7[-24],r11
80000f9c:	ef 4a ff e4 	st.w	r7[-28],r10
80000fa0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000fa4:	f0 09 15 04 	lsl	r9,r8,0x4
80000fa8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000fac:	10 39       	cp.w	r9,r8
80000fae:	e0 8b 00 06 	brhi	80000fba <usartSetBaudrate+0x2e>
80000fb2:	31 09       	mov	r9,16
80000fb4:	ef 49 ff d4 	st.w	r7[-44],r9
80000fb8:	c0 48       	rjmp	80000fc0 <usartSetBaudrate+0x34>
80000fba:	30 88       	mov	r8,8
80000fbc:	ef 48 ff d4 	st.w	r7[-44],r8
80000fc0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000fc4:	ef 49 ff f0 	st.w	r7[-16],r9
80000fc8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000fcc:	f0 0a 15 03 	lsl	r10,r8,0x3
80000fd0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000fd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000fd8:	f2 08 02 48 	mul	r8,r9,r8
80000fdc:	a1 98       	lsr	r8,0x1
80000fde:	10 0a       	add	r10,r8
80000fe0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000fe4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000fe8:	f2 08 02 48 	mul	r8,r9,r8
80000fec:	f4 08 0d 08 	divu	r8,r10,r8
80000ff0:	ef 48 ff f4 	st.w	r7[-12],r8
80000ff4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ff8:	a3 98       	lsr	r8,0x3
80000ffa:	ef 48 ff f8 	st.w	r7[-8],r8
80000ffe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001002:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80001006:	ef 48 ff fc 	st.w	r7[-4],r8
8000100a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000100e:	58 08       	cp.w	r8,0
80001010:	c0 70       	breq	8000101e <usartSetBaudrate+0x92>
80001012:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001016:	e0 48 ff ff 	cp.w	r8,65535
8000101a:	e0 88 00 06 	brls	80001026 <usartSetBaudrate+0x9a>
8000101e:	30 18       	mov	r8,1
80001020:	ef 48 ff d8 	st.w	r7[-40],r8
80001024:	c2 c8       	rjmp	8000107c <usartSetBaudrate+0xf0>
80001026:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000102a:	70 18       	ld.w	r8,r8[0x4]
8000102c:	10 99       	mov	r9,r8
8000102e:	e4 19 ff f7 	andh	r9,0xfff7
80001032:	e0 19 fe cf 	andl	r9,0xfecf
80001036:	ef 49 ff dc 	st.w	r7[-36],r9
8000103a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000103e:	59 08       	cp.w	r8,16
80001040:	c0 60       	breq	8000104c <usartSetBaudrate+0xc0>
80001042:	e8 68 00 00 	mov	r8,524288
80001046:	ef 48 ff e0 	st.w	r7[-32],r8
8000104a:	c0 48       	rjmp	80001052 <usartSetBaudrate+0xc6>
8000104c:	30 09       	mov	r9,0
8000104e:	ef 49 ff e0 	st.w	r7[-32],r9
80001052:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001056:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000105a:	10 49       	or	r9,r8
8000105c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001060:	91 19       	st.w	r8[0x4],r9
80001062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001066:	f0 09 15 10 	lsl	r9,r8,0x10
8000106a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000106e:	10 49       	or	r9,r8
80001070:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001074:	91 89       	st.w	r8[0x20],r9
80001076:	30 09       	mov	r9,0
80001078:	ef 49 ff d8 	st.w	r7[-40],r9
8000107c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001080:	10 9c       	mov	r12,r8
80001082:	2f 5d       	sub	sp,-44
80001084:	e3 cd 80 80 	ldm	sp++,r7,pc

80001088 <usartInit>:
80001088:	eb cd 40 80 	pushm	r7,lr
8000108c:	1a 97       	mov	r7,sp
8000108e:	20 4d       	sub	sp,16
80001090:	ef 4c ff f8 	st.w	r7[-8],r12
80001094:	ef 4b ff f4 	st.w	r7[-12],r11
80001098:	ef 4a ff f0 	st.w	r7[-16],r10
8000109c:	fe 78 10 00 	mov	r8,-61440
800010a0:	ef 48 ff fc 	st.w	r7[-4],r8
800010a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800010a8:	30 18       	mov	r8,1
800010aa:	93 28       	st.w	r9[0x8],r8
800010ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800010b0:	30 28       	mov	r8,2
800010b2:	93 28       	st.w	r9[0x8],r8
800010b4:	ee fc ff f8 	ld.w	r12,r7[-8]
800010b8:	f0 1f 00 3b 	mcall	800011a4 <usartInit+0x11c>
800010bc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800010c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010c4:	70 08       	ld.w	r8,r8[0x0]
800010c6:	12 9a       	mov	r10,r9
800010c8:	10 9b       	mov	r11,r8
800010ca:	ee fc ff f8 	ld.w	r12,r7[-8]
800010ce:	f0 1f 00 37 	mcall	800011a8 <usartInit+0x120>
800010d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010d6:	11 c9       	ld.ub	r9,r8[0x4]
800010d8:	30 98       	mov	r8,9
800010da:	f0 09 18 00 	cp.b	r9,r8
800010de:	c0 a1       	brne	800010f2 <usartInit+0x6a>
800010e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010e4:	70 18       	ld.w	r8,r8[0x4]
800010e6:	10 99       	mov	r9,r8
800010e8:	b1 b9       	sbr	r9,0x11
800010ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ee:	91 19       	st.w	r8[0x4],r9
800010f0:	c0 d8       	rjmp	8000110a <usartInit+0x82>
800010f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010f6:	70 19       	ld.w	r9,r8[0x4]
800010f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010fc:	11 c8       	ld.ub	r8,r8[0x4]
800010fe:	20 58       	sub	r8,5
80001100:	a7 68       	lsl	r8,0x6
80001102:	10 49       	or	r9,r8
80001104:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001108:	91 19       	st.w	r8[0x4],r9
8000110a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000110e:	70 1a       	ld.w	r10,r8[0x4]
80001110:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001114:	11 d8       	ld.ub	r8,r8[0x5]
80001116:	f0 09 15 09 	lsl	r9,r8,0x9
8000111a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000111e:	f1 38 00 08 	ld.ub	r8,r8[8]
80001122:	af 68       	lsl	r8,0xe
80001124:	f3 e8 10 08 	or	r8,r9,r8
80001128:	f5 e8 10 09 	or	r9,r10,r8
8000112c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001130:	91 19       	st.w	r8[0x4],r9
80001132:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001136:	90 39       	ld.sh	r9,r8[0x6]
80001138:	30 28       	mov	r8,2
8000113a:	f0 09 19 00 	cp.h	r9,r8
8000113e:	e0 88 00 14 	brls	80001166 <usartInit+0xde>
80001142:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001146:	70 18       	ld.w	r8,r8[0x4]
80001148:	10 99       	mov	r9,r8
8000114a:	ad b9       	sbr	r9,0xd
8000114c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001150:	91 19       	st.w	r8[0x4],r9
80001152:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001156:	90 38       	ld.sh	r8,r8[0x6]
80001158:	5c 78       	castu.h	r8
8000115a:	20 28       	sub	r8,2
8000115c:	10 99       	mov	r9,r8
8000115e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001162:	91 a9       	st.w	r8[0x28],r9
80001164:	c0 d8       	rjmp	8000117e <usartInit+0xf6>
80001166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000116a:	70 19       	ld.w	r9,r8[0x4]
8000116c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001170:	90 38       	ld.sh	r8,r8[0x6]
80001172:	5c 78       	castu.h	r8
80001174:	ad 68       	lsl	r8,0xc
80001176:	10 49       	or	r9,r8
80001178:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000117c:	91 19       	st.w	r8[0x4],r9
8000117e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001182:	70 18       	ld.w	r8,r8[0x4]
80001184:	10 99       	mov	r9,r8
80001186:	e0 19 ff f0 	andl	r9,0xfff0
8000118a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000118e:	91 19       	st.w	r8[0x4],r9
80001190:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001194:	35 08       	mov	r8,80
80001196:	93 08       	st.w	r9[0x0],r8
80001198:	30 08       	mov	r8,0
8000119a:	10 9c       	mov	r12,r8
8000119c:	2f cd       	sub	sp,-16
8000119e:	e3 cd 80 80 	ldm	sp++,r7,pc
800011a2:	00 00       	add	r0,r0
800011a4:	80 00       	ld.sh	r0,r0[0x0]
800011a6:	0f 1c       	ld.sh	r12,r7++
800011a8:	80 00       	ld.sh	r0,r0[0x0]
800011aa:	0f 8c       	ld.ub	r12,r7[0x0]

800011ac <timerInit>:
800011ac:	d5 01       	pushm	r11,lr
800011ae:	d2 01       	pushm	r12
800011b0:	f0 1f 00 28 	mcall	80001250 <timerClearInterrupt+0x10>
800011b4:	f0 1f 00 28 	mcall	80001254 <timerClearInterrupt+0x14>
800011b8:	e0 6c 38 00 	mov	r12,14336
800011bc:	ea 1c ff ff 	orh	r12,0xffff
800011c0:	e0 6b c0 00 	mov	r11,49152
800011c4:	ea 1b 00 00 	orh	r11,0x0
800011c8:	99 1b       	st.w	r12[0x4],r11
800011ca:	30 1b       	mov	r11,1
800011cc:	a5 6b       	lsl	r11,0x4
800011ce:	99 9b       	st.w	r12[0x24],r11
800011d0:	d2 02       	popm	r12
800011d2:	f0 1f 00 22 	mcall	80001258 <timerClearInterrupt+0x18>
800011d6:	d5 02       	popm	r11,lr
800011d8:	1c 9f       	mov	pc,lr

800011da <timerReset>:
800011da:	d3 01       	pushm	r11-r12
800011dc:	e0 6c 38 00 	mov	r12,14336
800011e0:	ea 1c ff ff 	orh	r12,0xffff
800011e4:	30 5b       	mov	r11,5
800011e6:	99 0b       	st.w	r12[0x0],r11
800011e8:	e0 6b 00 08 	mov	r11,8
800011ec:	ea 1b 00 00 	orh	r11,0x0
800011f0:	76 0b       	ld.w	r11,r11[0x0]
800011f2:	99 7b       	st.w	r12[0x1c],r11
800011f4:	d3 02       	popm	r11-r12
800011f6:	1c 9f       	mov	pc,lr

800011f8 <timerStop>:
800011f8:	d3 01       	pushm	r11-r12
800011fa:	e0 6c 38 00 	mov	r12,14336
800011fe:	ea 1c ff ff 	orh	r12,0xffff
80001202:	30 2b       	mov	r11,2
80001204:	99 0b       	st.w	r12[0x0],r11
80001206:	d3 02       	popm	r11-r12
80001208:	1c 9f       	mov	pc,lr

8000120a <timerRCSet>:
8000120a:	d3 01       	pushm	r11-r12
8000120c:	49 4b       	lddpc	r11,8000125c <timerClearInterrupt+0x1c>
8000120e:	97 0c       	st.w	r11[0x0],r12
80001210:	e0 6c 38 00 	mov	r12,14336
80001214:	ea 1c ff ff 	orh	r12,0xffff
80001218:	76 0b       	ld.w	r11,r11[0x0]
8000121a:	99 7b       	st.w	r12[0x1c],r11
8000121c:	d3 02       	popm	r11-r12
8000121e:	1c 9f       	mov	pc,lr

80001220 <timerPrescaleSet>:
80001220:	d3 81       	pushm	r10-r12
80001222:	49 0b       	lddpc	r11,80001260 <timerClearInterrupt+0x20>
80001224:	97 0c       	st.w	r11[0x0],r12
80001226:	e0 6c 38 00 	mov	r12,14336
8000122a:	ea 1c ff ff 	orh	r12,0xffff
8000122e:	78 1a       	ld.w	r10,r12[0x4]
80001230:	3f 8b       	mov	r11,-8
80001232:	16 6a       	and	r10,r11
80001234:	48 bb       	lddpc	r11,80001260 <timerClearInterrupt+0x20>
80001236:	76 0b       	ld.w	r11,r11[0x0]
80001238:	14 4b       	or	r11,r10
8000123a:	99 1b       	st.w	r12[0x4],r11
8000123c:	d3 82       	popm	r10-r12
8000123e:	1c 9f       	mov	pc,lr

80001240 <timerClearInterrupt>:
80001240:	d2 01       	pushm	r12
80001242:	e0 6c 38 00 	mov	r12,14336
80001246:	ea 1c ff ff 	orh	r12,0xffff
8000124a:	78 8c       	ld.w	r12,r12[0x20]
8000124c:	d2 02       	popm	r12
8000124e:	1c 9f       	mov	pc,lr
80001250:	80 00       	ld.sh	r0,r0[0x0]
80001252:	1d 66       	ld.uh	r6,--lr
80001254:	80 00       	ld.sh	r0,r0[0x0]
80001256:	12 40       	or	r0,r9
80001258:	80 00       	ld.sh	r0,r0[0x0]
8000125a:	0a fc       	st.b	--r5,r12
8000125c:	00 00       	add	r0,r0
8000125e:	00 08       	add	r8,r0
80001260:	00 00       	add	r0,r0
80001262:	00 0c       	add	r12,r0

80001264 <_stext>:
80001264:	49 7d       	lddpc	sp,800012c0 <udata_end+0x4>
80001266:	49 80       	lddpc	r0,800012c4 <udata_end+0x8>
80001268:	1a d0       	st.w	--sp,r0
8000126a:	e5 cd 20 00 	ldmts	sp,sp
8000126e:	1b 00       	ld.w	r0,sp++
80001270:	49 60       	lddpc	r0,800012c8 <udata_end+0xc>
80001272:	e3 b0 00 01 	mtsr	0x4,r0
80001276:	d5 53       	csrf	0x15
80001278:	e0 6c 0c 00 	mov	r12,3072
8000127c:	ea 1c ff ff 	orh	r12,0xffff
80001280:	e0 6b 01 07 	mov	r11,263
80001284:	99 ab       	st.w	r12[0x28],r11
80001286:	30 4b       	mov	r11,4
80001288:	99 0b       	st.w	r12[0x0],r11
8000128a:	e0 6a 00 80 	mov	r10,128

8000128e <xw8>:
8000128e:	79 5b       	ld.w	r11,r12[0x54]
80001290:	14 7b       	tst	r11,r10
80001292:	cf e0       	breq	8000128e <xw8>
80001294:	30 5b       	mov	r11,5
80001296:	99 0b       	st.w	r12[0x0],r11

80001298 <idata_>:
80001298:	48 d0       	lddpc	r0,800012cc <udata_end+0x10>
8000129a:	48 e1       	lddpc	r1,800012d0 <udata_end+0x14>
8000129c:	02 30       	cp.w	r0,r1
8000129e:	c0 62       	brcc	800012aa <idata_end>
800012a0:	48 d2       	lddpc	r2,800012d4 <udata_end+0x18>

800012a2 <idata_loop>:
800012a2:	05 04       	ld.w	r4,r2++
800012a4:	00 a4       	st.w	r0++,r4
800012a6:	02 30       	cp.w	r0,r1
800012a8:	cf d3       	brcs	800012a2 <idata_loop>

800012aa <idata_end>:
800012aa:	48 c0       	lddpc	r0,800012d8 <udata_end+0x1c>
800012ac:	48 c1       	lddpc	r1,800012dc <udata_end+0x20>
800012ae:	02 30       	cp.w	r0,r1
800012b0:	c0 62       	brcc	800012bc <udata_end>
800012b2:	30 02       	mov	r2,0
800012b4:	30 03       	mov	r3,0

800012b6 <udata_loop>:
800012b6:	00 a2       	st.w	r0++,r2
800012b8:	02 30       	cp.w	r0,r1
800012ba:	cf e3       	brcs	800012b6 <udata_loop>

800012bc <udata_end>:
800012bc:	48 9f       	lddpc	pc,800012e0 <udata_end+0x24>
800012be:	00 00       	add	r0,r0
800012c0:	00 01       	add	r1,r0
800012c2:	00 00       	add	r0,r0
800012c4:	00 00       	add	r0,r0
800012c6:	f0 00       	*unknown*
800012c8:	80 00       	ld.sh	r0,r0[0x0]
800012ca:	1c 00       	add	r0,lr
800012cc:	00 00       	add	r0,r0
800012ce:	00 08       	add	r8,r0
800012d0:	00 00       	add	r0,r0
800012d2:	05 18       	ld.sh	r8,r2++
800012d4:	80 00       	ld.sh	r0,r0[0x0]
800012d6:	20 88       	sub	r8,8
800012d8:	00 00       	add	r0,r0
800012da:	05 18       	ld.sh	r8,r2++
800012dc:	00 00       	add	r0,r0
800012de:	05 88       	ld.ub	r8,r2[0x0]
800012e0:	80 00       	ld.sh	r0,r0[0x0]
800012e2:	02 f8       	st.b	--r1,r8

800012e4 <calloc>:
800012e4:	d4 01       	pushm	lr
800012e6:	48 48       	lddpc	r8,800012f4 <calloc+0x10>
800012e8:	16 9a       	mov	r10,r11
800012ea:	18 9b       	mov	r11,r12
800012ec:	70 0c       	ld.w	r12,r8[0x0]
800012ee:	f0 1f 00 03 	mcall	800012f8 <calloc+0x14>
800012f2:	d8 02       	popm	pc
800012f4:	00 00       	add	r0,r0
800012f6:	01 00       	ld.w	r0,r0++
800012f8:	80 00       	ld.sh	r0,r0[0x0]
800012fa:	12 fc       	st.b	--r9,r12

800012fc <_calloc_r>:
800012fc:	d4 21       	pushm	r4-r7,lr
800012fe:	f4 0b 02 4b 	mul	r11,r10,r11
80001302:	f0 1f 00 15 	mcall	80001354 <_calloc_r+0x58>
80001306:	18 97       	mov	r7,r12
80001308:	c2 30       	breq	8000134e <_calloc_r+0x52>
8000130a:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000130e:	e0 1a ff fc 	andl	r10,0xfffc
80001312:	20 4a       	sub	r10,4
80001314:	e0 4a 00 24 	cp.w	r10,36
80001318:	e0 8b 00 18 	brhi	80001348 <_calloc_r+0x4c>
8000131c:	18 98       	mov	r8,r12
8000131e:	59 3a       	cp.w	r10,19
80001320:	e0 88 00 0f 	brls	8000133e <_calloc_r+0x42>
80001324:	30 09       	mov	r9,0
80001326:	10 a9       	st.w	r8++,r9
80001328:	10 a9       	st.w	r8++,r9
8000132a:	59 ba       	cp.w	r10,27
8000132c:	e0 88 00 09 	brls	8000133e <_calloc_r+0x42>
80001330:	10 a9       	st.w	r8++,r9
80001332:	10 a9       	st.w	r8++,r9
80001334:	e0 4a 00 24 	cp.w	r10,36
80001338:	c0 31       	brne	8000133e <_calloc_r+0x42>
8000133a:	10 a9       	st.w	r8++,r9
8000133c:	10 a9       	st.w	r8++,r9
8000133e:	30 09       	mov	r9,0
80001340:	10 a9       	st.w	r8++,r9
80001342:	91 19       	st.w	r8[0x4],r9
80001344:	91 09       	st.w	r8[0x0],r9
80001346:	c0 48       	rjmp	8000134e <_calloc_r+0x52>
80001348:	30 0b       	mov	r11,0
8000134a:	f0 1f 00 04 	mcall	80001358 <_calloc_r+0x5c>
8000134e:	0e 9c       	mov	r12,r7
80001350:	d8 22       	popm	r4-r7,pc
80001352:	00 00       	add	r0,r0
80001354:	80 00       	ld.sh	r0,r0[0x0]
80001356:	13 74       	ld.ub	r4,--r9
80001358:	80 00       	ld.sh	r0,r0[0x0]
8000135a:	17 c4       	ld.ub	r4,r11[0x4]

8000135c <free>:
8000135c:	d4 01       	pushm	lr
8000135e:	48 48       	lddpc	r8,8000136c <free+0x10>
80001360:	18 9b       	mov	r11,r12
80001362:	70 0c       	ld.w	r12,r8[0x0]
80001364:	f0 1f 00 03 	mcall	80001370 <free+0x14>
80001368:	d8 02       	popm	pc
8000136a:	00 00       	add	r0,r0
8000136c:	00 00       	add	r0,r0
8000136e:	01 00       	ld.w	r0,r0++
80001370:	80 00       	ld.sh	r0,r0[0x0]
80001372:	18 f4       	st.b	--r12,r4

80001374 <_malloc_r>:
80001374:	d4 31       	pushm	r0-r7,lr
80001376:	f6 c8 ff f5 	sub	r8,r11,-11
8000137a:	18 95       	mov	r5,r12
8000137c:	10 97       	mov	r7,r8
8000137e:	e0 17 ff f8 	andl	r7,0xfff8
80001382:	59 68       	cp.w	r8,22
80001384:	f9 b7 08 10 	movls	r7,16
80001388:	16 37       	cp.w	r7,r11
8000138a:	5f 38       	srlo	r8
8000138c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001390:	c0 50       	breq	8000139a <_malloc_r+0x26>
80001392:	30 c8       	mov	r8,12
80001394:	99 38       	st.w	r12[0xc],r8
80001396:	e0 8f 01 f3 	bral	8000177c <_malloc_r+0x408>
8000139a:	f0 1f 00 50 	mcall	800014d8 <_malloc_r+0x164>
8000139e:	e0 47 01 f7 	cp.w	r7,503
800013a2:	e0 8b 00 1c 	brhi	800013da <_malloc_r+0x66>
800013a6:	ee 03 16 03 	lsr	r3,r7,0x3
800013aa:	4c d8       	lddpc	r8,800014dc <_malloc_r+0x168>
800013ac:	f0 03 00 38 	add	r8,r8,r3<<0x3
800013b0:	70 36       	ld.w	r6,r8[0xc]
800013b2:	10 36       	cp.w	r6,r8
800013b4:	c0 61       	brne	800013c0 <_malloc_r+0x4c>
800013b6:	ec c8 ff f8 	sub	r8,r6,-8
800013ba:	70 36       	ld.w	r6,r8[0xc]
800013bc:	10 36       	cp.w	r6,r8
800013be:	c0 c0       	breq	800013d6 <_malloc_r+0x62>
800013c0:	6c 18       	ld.w	r8,r6[0x4]
800013c2:	e0 18 ff fc 	andl	r8,0xfffc
800013c6:	6c 3a       	ld.w	r10,r6[0xc]
800013c8:	ec 08 00 09 	add	r9,r6,r8
800013cc:	0a 9c       	mov	r12,r5
800013ce:	6c 28       	ld.w	r8,r6[0x8]
800013d0:	95 28       	st.w	r10[0x8],r8
800013d2:	91 3a       	st.w	r8[0xc],r10
800013d4:	c4 68       	rjmp	80001460 <_malloc_r+0xec>
800013d6:	2f e3       	sub	r3,-2
800013d8:	c4 c8       	rjmp	80001470 <_malloc_r+0xfc>
800013da:	ee 03 16 09 	lsr	r3,r7,0x9
800013de:	c0 41       	brne	800013e6 <_malloc_r+0x72>
800013e0:	ee 03 16 03 	lsr	r3,r7,0x3
800013e4:	c2 68       	rjmp	80001430 <_malloc_r+0xbc>
800013e6:	58 43       	cp.w	r3,4
800013e8:	e0 8b 00 06 	brhi	800013f4 <_malloc_r+0x80>
800013ec:	ee 03 16 06 	lsr	r3,r7,0x6
800013f0:	2c 83       	sub	r3,-56
800013f2:	c1 f8       	rjmp	80001430 <_malloc_r+0xbc>
800013f4:	59 43       	cp.w	r3,20
800013f6:	e0 8b 00 04 	brhi	800013fe <_malloc_r+0x8a>
800013fa:	2a 53       	sub	r3,-91
800013fc:	c1 a8       	rjmp	80001430 <_malloc_r+0xbc>
800013fe:	e0 43 00 54 	cp.w	r3,84
80001402:	e0 8b 00 06 	brhi	8000140e <_malloc_r+0x9a>
80001406:	ee 03 16 0c 	lsr	r3,r7,0xc
8000140a:	29 23       	sub	r3,-110
8000140c:	c1 28       	rjmp	80001430 <_malloc_r+0xbc>
8000140e:	e0 43 01 54 	cp.w	r3,340
80001412:	e0 8b 00 06 	brhi	8000141e <_malloc_r+0xaa>
80001416:	ee 03 16 0f 	lsr	r3,r7,0xf
8000141a:	28 93       	sub	r3,-119
8000141c:	c0 a8       	rjmp	80001430 <_malloc_r+0xbc>
8000141e:	e0 43 05 54 	cp.w	r3,1364
80001422:	e0 88 00 04 	brls	8000142a <_malloc_r+0xb6>
80001426:	37 e3       	mov	r3,126
80001428:	c0 48       	rjmp	80001430 <_malloc_r+0xbc>
8000142a:	ee 03 16 12 	lsr	r3,r7,0x12
8000142e:	28 43       	sub	r3,-124
80001430:	4a ba       	lddpc	r10,800014dc <_malloc_r+0x168>
80001432:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001436:	74 36       	ld.w	r6,r10[0xc]
80001438:	c1 98       	rjmp	8000146a <_malloc_r+0xf6>
8000143a:	6c 19       	ld.w	r9,r6[0x4]
8000143c:	e0 19 ff fc 	andl	r9,0xfffc
80001440:	f2 07 01 0b 	sub	r11,r9,r7
80001444:	58 fb       	cp.w	r11,15
80001446:	e0 8a 00 04 	brle	8000144e <_malloc_r+0xda>
8000144a:	20 13       	sub	r3,1
8000144c:	c1 18       	rjmp	8000146e <_malloc_r+0xfa>
8000144e:	6c 38       	ld.w	r8,r6[0xc]
80001450:	58 0b       	cp.w	r11,0
80001452:	c0 b5       	brlt	80001468 <_malloc_r+0xf4>
80001454:	6c 2a       	ld.w	r10,r6[0x8]
80001456:	ec 09 00 09 	add	r9,r6,r9
8000145a:	0a 9c       	mov	r12,r5
8000145c:	91 2a       	st.w	r8[0x8],r10
8000145e:	95 38       	st.w	r10[0xc],r8
80001460:	72 18       	ld.w	r8,r9[0x4]
80001462:	a1 a8       	sbr	r8,0x0
80001464:	93 18       	st.w	r9[0x4],r8
80001466:	cb c8       	rjmp	800015de <_malloc_r+0x26a>
80001468:	10 96       	mov	r6,r8
8000146a:	14 36       	cp.w	r6,r10
8000146c:	ce 71       	brne	8000143a <_malloc_r+0xc6>
8000146e:	2f f3       	sub	r3,-1
80001470:	49 ba       	lddpc	r10,800014dc <_malloc_r+0x168>
80001472:	f4 cc ff f8 	sub	r12,r10,-8
80001476:	78 26       	ld.w	r6,r12[0x8]
80001478:	18 36       	cp.w	r6,r12
8000147a:	c6 e0       	breq	80001556 <_malloc_r+0x1e2>
8000147c:	6c 19       	ld.w	r9,r6[0x4]
8000147e:	e0 19 ff fc 	andl	r9,0xfffc
80001482:	f2 07 01 08 	sub	r8,r9,r7
80001486:	58 f8       	cp.w	r8,15
80001488:	e0 89 00 90 	brgt	800015a8 <_malloc_r+0x234>
8000148c:	99 3c       	st.w	r12[0xc],r12
8000148e:	99 2c       	st.w	r12[0x8],r12
80001490:	58 08       	cp.w	r8,0
80001492:	c0 55       	brlt	8000149c <_malloc_r+0x128>
80001494:	ec 09 00 09 	add	r9,r6,r9
80001498:	0a 9c       	mov	r12,r5
8000149a:	ce 3b       	rjmp	80001460 <_malloc_r+0xec>
8000149c:	e0 49 01 ff 	cp.w	r9,511
800014a0:	e0 8b 00 13 	brhi	800014c6 <_malloc_r+0x152>
800014a4:	a3 99       	lsr	r9,0x3
800014a6:	f4 09 00 38 	add	r8,r10,r9<<0x3
800014aa:	70 2b       	ld.w	r11,r8[0x8]
800014ac:	8d 38       	st.w	r6[0xc],r8
800014ae:	8d 2b       	st.w	r6[0x8],r11
800014b0:	97 36       	st.w	r11[0xc],r6
800014b2:	91 26       	st.w	r8[0x8],r6
800014b4:	a3 49       	asr	r9,0x2
800014b6:	74 18       	ld.w	r8,r10[0x4]
800014b8:	30 1b       	mov	r11,1
800014ba:	f6 09 09 49 	lsl	r9,r11,r9
800014be:	f1 e9 10 09 	or	r9,r8,r9
800014c2:	95 19       	st.w	r10[0x4],r9
800014c4:	c4 98       	rjmp	80001556 <_malloc_r+0x1e2>
800014c6:	f2 0a 16 09 	lsr	r10,r9,0x9
800014ca:	58 4a       	cp.w	r10,4
800014cc:	e0 8b 00 0a 	brhi	800014e0 <_malloc_r+0x16c>
800014d0:	f2 0a 16 06 	lsr	r10,r9,0x6
800014d4:	2c 8a       	sub	r10,-56
800014d6:	c2 38       	rjmp	8000151c <_malloc_r+0x1a8>
800014d8:	80 00       	ld.sh	r0,r0[0x0]
800014da:	17 d2       	ld.ub	r2,r11[0x5]
800014dc:	00 00       	add	r0,r0
800014de:	01 04       	ld.w	r4,r0++
800014e0:	59 4a       	cp.w	r10,20
800014e2:	e0 8b 00 04 	brhi	800014ea <_malloc_r+0x176>
800014e6:	2a 5a       	sub	r10,-91
800014e8:	c1 a8       	rjmp	8000151c <_malloc_r+0x1a8>
800014ea:	e0 4a 00 54 	cp.w	r10,84
800014ee:	e0 8b 00 06 	brhi	800014fa <_malloc_r+0x186>
800014f2:	f2 0a 16 0c 	lsr	r10,r9,0xc
800014f6:	29 2a       	sub	r10,-110
800014f8:	c1 28       	rjmp	8000151c <_malloc_r+0x1a8>
800014fa:	e0 4a 01 54 	cp.w	r10,340
800014fe:	e0 8b 00 06 	brhi	8000150a <_malloc_r+0x196>
80001502:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001506:	28 9a       	sub	r10,-119
80001508:	c0 a8       	rjmp	8000151c <_malloc_r+0x1a8>
8000150a:	e0 4a 05 54 	cp.w	r10,1364
8000150e:	e0 88 00 04 	brls	80001516 <_malloc_r+0x1a2>
80001512:	37 ea       	mov	r10,126
80001514:	c0 48       	rjmp	8000151c <_malloc_r+0x1a8>
80001516:	f2 0a 16 12 	lsr	r10,r9,0x12
8000151a:	28 4a       	sub	r10,-124
8000151c:	4c 8b       	lddpc	r11,8000163c <_malloc_r+0x2c8>
8000151e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001522:	68 28       	ld.w	r8,r4[0x8]
80001524:	08 38       	cp.w	r8,r4
80001526:	c0 e1       	brne	80001542 <_malloc_r+0x1ce>
80001528:	76 19       	ld.w	r9,r11[0x4]
8000152a:	a3 4a       	asr	r10,0x2
8000152c:	30 1e       	mov	lr,1
8000152e:	fc 0a 09 4a 	lsl	r10,lr,r10
80001532:	f3 ea 10 0a 	or	r10,r9,r10
80001536:	10 99       	mov	r9,r8
80001538:	97 1a       	st.w	r11[0x4],r10
8000153a:	c0 a8       	rjmp	8000154e <_malloc_r+0x1da>
8000153c:	70 28       	ld.w	r8,r8[0x8]
8000153e:	08 38       	cp.w	r8,r4
80001540:	c0 60       	breq	8000154c <_malloc_r+0x1d8>
80001542:	70 1a       	ld.w	r10,r8[0x4]
80001544:	e0 1a ff fc 	andl	r10,0xfffc
80001548:	14 39       	cp.w	r9,r10
8000154a:	cf 93       	brcs	8000153c <_malloc_r+0x1c8>
8000154c:	70 39       	ld.w	r9,r8[0xc]
8000154e:	8d 39       	st.w	r6[0xc],r9
80001550:	8d 28       	st.w	r6[0x8],r8
80001552:	91 36       	st.w	r8[0xc],r6
80001554:	93 26       	st.w	r9[0x8],r6
80001556:	e6 08 14 02 	asr	r8,r3,0x2
8000155a:	30 1b       	mov	r11,1
8000155c:	4b 84       	lddpc	r4,8000163c <_malloc_r+0x2c8>
8000155e:	f6 08 09 4b 	lsl	r11,r11,r8
80001562:	68 18       	ld.w	r8,r4[0x4]
80001564:	10 3b       	cp.w	r11,r8
80001566:	e0 8b 00 6f 	brhi	80001644 <_malloc_r+0x2d0>
8000156a:	f7 e8 00 09 	and	r9,r11,r8
8000156e:	c0 b1       	brne	80001584 <_malloc_r+0x210>
80001570:	e0 13 ff fc 	andl	r3,0xfffc
80001574:	a1 7b       	lsl	r11,0x1
80001576:	2f c3       	sub	r3,-4
80001578:	c0 38       	rjmp	8000157e <_malloc_r+0x20a>
8000157a:	2f c3       	sub	r3,-4
8000157c:	a1 7b       	lsl	r11,0x1
8000157e:	f7 e8 00 09 	and	r9,r11,r8
80001582:	cf c0       	breq	8000157a <_malloc_r+0x206>
80001584:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001588:	06 92       	mov	r2,r3
8000158a:	1c 91       	mov	r1,lr
8000158c:	62 36       	ld.w	r6,r1[0xc]
8000158e:	c2 e8       	rjmp	800015ea <_malloc_r+0x276>
80001590:	6c 1a       	ld.w	r10,r6[0x4]
80001592:	e0 1a ff fc 	andl	r10,0xfffc
80001596:	f4 07 01 08 	sub	r8,r10,r7
8000159a:	58 f8       	cp.w	r8,15
8000159c:	e0 8a 00 15 	brle	800015c6 <_malloc_r+0x252>
800015a0:	6c 3a       	ld.w	r10,r6[0xc]
800015a2:	6c 29       	ld.w	r9,r6[0x8]
800015a4:	95 29       	st.w	r10[0x8],r9
800015a6:	93 3a       	st.w	r9[0xc],r10
800015a8:	0e 99       	mov	r9,r7
800015aa:	ec 07 00 07 	add	r7,r6,r7
800015ae:	a1 a9       	sbr	r9,0x0
800015b0:	99 37       	st.w	r12[0xc],r7
800015b2:	99 27       	st.w	r12[0x8],r7
800015b4:	8d 19       	st.w	r6[0x4],r9
800015b6:	ee 08 09 08 	st.w	r7[r8],r8
800015ba:	8f 2c       	st.w	r7[0x8],r12
800015bc:	8f 3c       	st.w	r7[0xc],r12
800015be:	a1 a8       	sbr	r8,0x0
800015c0:	0a 9c       	mov	r12,r5
800015c2:	8f 18       	st.w	r7[0x4],r8
800015c4:	c0 d8       	rjmp	800015de <_malloc_r+0x26a>
800015c6:	6c 39       	ld.w	r9,r6[0xc]
800015c8:	58 08       	cp.w	r8,0
800015ca:	c0 f5       	brlt	800015e8 <_malloc_r+0x274>
800015cc:	ec 0a 00 0a 	add	r10,r6,r10
800015d0:	74 18       	ld.w	r8,r10[0x4]
800015d2:	a1 a8       	sbr	r8,0x0
800015d4:	0a 9c       	mov	r12,r5
800015d6:	95 18       	st.w	r10[0x4],r8
800015d8:	6c 28       	ld.w	r8,r6[0x8]
800015da:	93 28       	st.w	r9[0x8],r8
800015dc:	91 39       	st.w	r8[0xc],r9
800015de:	f0 1f 00 19 	mcall	80001640 <_malloc_r+0x2cc>
800015e2:	ec cc ff f8 	sub	r12,r6,-8
800015e6:	d8 32       	popm	r0-r7,pc
800015e8:	12 96       	mov	r6,r9
800015ea:	02 36       	cp.w	r6,r1
800015ec:	cd 21       	brne	80001590 <_malloc_r+0x21c>
800015ee:	2f f2       	sub	r2,-1
800015f0:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800015f4:	c0 30       	breq	800015fa <_malloc_r+0x286>
800015f6:	2f 81       	sub	r1,-8
800015f8:	cc ab       	rjmp	8000158c <_malloc_r+0x218>
800015fa:	1c 98       	mov	r8,lr
800015fc:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001600:	c0 81       	brne	80001610 <_malloc_r+0x29c>
80001602:	68 19       	ld.w	r9,r4[0x4]
80001604:	f6 08 11 ff 	rsub	r8,r11,-1
80001608:	f3 e8 00 08 	and	r8,r9,r8
8000160c:	89 18       	st.w	r4[0x4],r8
8000160e:	c0 78       	rjmp	8000161c <_malloc_r+0x2a8>
80001610:	f0 c9 00 08 	sub	r9,r8,8
80001614:	20 13       	sub	r3,1
80001616:	70 08       	ld.w	r8,r8[0x0]
80001618:	12 38       	cp.w	r8,r9
8000161a:	cf 10       	breq	800015fc <_malloc_r+0x288>
8000161c:	a1 7b       	lsl	r11,0x1
8000161e:	68 18       	ld.w	r8,r4[0x4]
80001620:	10 3b       	cp.w	r11,r8
80001622:	e0 8b 00 11 	brhi	80001644 <_malloc_r+0x2d0>
80001626:	58 0b       	cp.w	r11,0
80001628:	c0 e0       	breq	80001644 <_malloc_r+0x2d0>
8000162a:	04 93       	mov	r3,r2
8000162c:	c0 38       	rjmp	80001632 <_malloc_r+0x2be>
8000162e:	2f c3       	sub	r3,-4
80001630:	a1 7b       	lsl	r11,0x1
80001632:	f7 e8 00 09 	and	r9,r11,r8
80001636:	ca 71       	brne	80001584 <_malloc_r+0x210>
80001638:	cf bb       	rjmp	8000162e <_malloc_r+0x2ba>
8000163a:	00 00       	add	r0,r0
8000163c:	00 00       	add	r0,r0
8000163e:	01 04       	ld.w	r4,r0++
80001640:	80 00       	ld.sh	r0,r0[0x0]
80001642:	17 d4       	ld.ub	r4,r11[0x5]
80001644:	68 23       	ld.w	r3,r4[0x8]
80001646:	66 12       	ld.w	r2,r3[0x4]
80001648:	e0 12 ff fc 	andl	r2,0xfffc
8000164c:	0e 32       	cp.w	r2,r7
8000164e:	5f 39       	srlo	r9
80001650:	e4 07 01 08 	sub	r8,r2,r7
80001654:	58 f8       	cp.w	r8,15
80001656:	5f aa       	srle	r10
80001658:	f5 e9 10 09 	or	r9,r10,r9
8000165c:	e0 80 00 a2 	breq	800017a0 <_malloc_r+0x42c>
80001660:	4c 88       	lddpc	r8,80001780 <_malloc_r+0x40c>
80001662:	70 01       	ld.w	r1,r8[0x0]
80001664:	4c 88       	lddpc	r8,80001784 <_malloc_r+0x410>
80001666:	2f 01       	sub	r1,-16
80001668:	70 08       	ld.w	r8,r8[0x0]
8000166a:	0e 01       	add	r1,r7
8000166c:	5b f8       	cp.w	r8,-1
8000166e:	c0 40       	breq	80001676 <_malloc_r+0x302>
80001670:	28 11       	sub	r1,-127
80001672:	e0 11 ff 80 	andl	r1,0xff80
80001676:	02 9b       	mov	r11,r1
80001678:	0a 9c       	mov	r12,r5
8000167a:	f0 1f 00 44 	mcall	80001788 <_malloc_r+0x414>
8000167e:	18 96       	mov	r6,r12
80001680:	5b fc       	cp.w	r12,-1
80001682:	c6 e0       	breq	8000175e <_malloc_r+0x3ea>
80001684:	e6 02 00 08 	add	r8,r3,r2
80001688:	10 3c       	cp.w	r12,r8
8000168a:	c0 32       	brcc	80001690 <_malloc_r+0x31c>
8000168c:	08 33       	cp.w	r3,r4
8000168e:	c6 81       	brne	8000175e <_malloc_r+0x3ea>
80001690:	4b fa       	lddpc	r10,8000178c <_malloc_r+0x418>
80001692:	74 09       	ld.w	r9,r10[0x0]
80001694:	e2 09 00 09 	add	r9,r1,r9
80001698:	95 09       	st.w	r10[0x0],r9
8000169a:	10 36       	cp.w	r6,r8
8000169c:	c0 a1       	brne	800016b0 <_malloc_r+0x33c>
8000169e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800016a2:	c0 71       	brne	800016b0 <_malloc_r+0x33c>
800016a4:	e2 02 00 02 	add	r2,r1,r2
800016a8:	68 28       	ld.w	r8,r4[0x8]
800016aa:	a1 a2       	sbr	r2,0x0
800016ac:	91 12       	st.w	r8[0x4],r2
800016ae:	c4 c8       	rjmp	80001746 <_malloc_r+0x3d2>
800016b0:	4b 5a       	lddpc	r10,80001784 <_malloc_r+0x410>
800016b2:	74 0b       	ld.w	r11,r10[0x0]
800016b4:	5b fb       	cp.w	r11,-1
800016b6:	c0 31       	brne	800016bc <_malloc_r+0x348>
800016b8:	95 06       	st.w	r10[0x0],r6
800016ba:	c0 68       	rjmp	800016c6 <_malloc_r+0x352>
800016bc:	ec 09 00 09 	add	r9,r6,r9
800016c0:	4b 3a       	lddpc	r10,8000178c <_malloc_r+0x418>
800016c2:	10 19       	sub	r9,r8
800016c4:	95 09       	st.w	r10[0x0],r9
800016c6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800016ca:	f0 09 11 08 	rsub	r9,r8,8
800016ce:	58 08       	cp.w	r8,0
800016d0:	f2 08 17 10 	movne	r8,r9
800016d4:	ed d8 e1 06 	addne	r6,r6,r8
800016d8:	28 08       	sub	r8,-128
800016da:	ec 01 00 01 	add	r1,r6,r1
800016de:	0a 9c       	mov	r12,r5
800016e0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800016e4:	f0 01 01 01 	sub	r1,r8,r1
800016e8:	02 9b       	mov	r11,r1
800016ea:	f0 1f 00 28 	mcall	80001788 <_malloc_r+0x414>
800016ee:	4a 88       	lddpc	r8,8000178c <_malloc_r+0x418>
800016f0:	5b fc       	cp.w	r12,-1
800016f2:	ec 0c 17 00 	moveq	r12,r6
800016f6:	f9 b1 00 00 	moveq	r1,0
800016fa:	70 09       	ld.w	r9,r8[0x0]
800016fc:	0c 1c       	sub	r12,r6
800016fe:	89 26       	st.w	r4[0x8],r6
80001700:	02 0c       	add	r12,r1
80001702:	12 01       	add	r1,r9
80001704:	a1 ac       	sbr	r12,0x0
80001706:	91 01       	st.w	r8[0x0],r1
80001708:	8d 1c       	st.w	r6[0x4],r12
8000170a:	08 33       	cp.w	r3,r4
8000170c:	c1 d0       	breq	80001746 <_malloc_r+0x3d2>
8000170e:	58 f2       	cp.w	r2,15
80001710:	e0 8b 00 05 	brhi	8000171a <_malloc_r+0x3a6>
80001714:	30 18       	mov	r8,1
80001716:	8d 18       	st.w	r6[0x4],r8
80001718:	c2 38       	rjmp	8000175e <_malloc_r+0x3ea>
8000171a:	30 59       	mov	r9,5
8000171c:	20 c2       	sub	r2,12
8000171e:	e0 12 ff f8 	andl	r2,0xfff8
80001722:	e6 02 00 08 	add	r8,r3,r2
80001726:	91 29       	st.w	r8[0x8],r9
80001728:	91 19       	st.w	r8[0x4],r9
8000172a:	66 18       	ld.w	r8,r3[0x4]
8000172c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001730:	e5 e8 10 08 	or	r8,r2,r8
80001734:	87 18       	st.w	r3[0x4],r8
80001736:	58 f2       	cp.w	r2,15
80001738:	e0 88 00 07 	brls	80001746 <_malloc_r+0x3d2>
8000173c:	e6 cb ff f8 	sub	r11,r3,-8
80001740:	0a 9c       	mov	r12,r5
80001742:	f0 1f 00 14 	mcall	80001790 <_malloc_r+0x41c>
80001746:	49 49       	lddpc	r9,80001794 <_malloc_r+0x420>
80001748:	72 0a       	ld.w	r10,r9[0x0]
8000174a:	49 18       	lddpc	r8,8000178c <_malloc_r+0x418>
8000174c:	70 08       	ld.w	r8,r8[0x0]
8000174e:	14 38       	cp.w	r8,r10
80001750:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001754:	49 19       	lddpc	r9,80001798 <_malloc_r+0x424>
80001756:	72 0a       	ld.w	r10,r9[0x0]
80001758:	14 38       	cp.w	r8,r10
8000175a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000175e:	68 28       	ld.w	r8,r4[0x8]
80001760:	70 18       	ld.w	r8,r8[0x4]
80001762:	e0 18 ff fc 	andl	r8,0xfffc
80001766:	0e 38       	cp.w	r8,r7
80001768:	5f 39       	srlo	r9
8000176a:	0e 18       	sub	r8,r7
8000176c:	58 f8       	cp.w	r8,15
8000176e:	5f aa       	srle	r10
80001770:	f5 e9 10 09 	or	r9,r10,r9
80001774:	c1 60       	breq	800017a0 <_malloc_r+0x42c>
80001776:	0a 9c       	mov	r12,r5
80001778:	f0 1f 00 09 	mcall	8000179c <_malloc_r+0x428>
8000177c:	d8 3a       	popm	r0-r7,pc,r12=0
8000177e:	00 00       	add	r0,r0
80001780:	00 00       	add	r0,r0
80001782:	05 20       	ld.uh	r0,r2++
80001784:	00 00       	add	r0,r0
80001786:	05 10       	ld.sh	r0,r2++
80001788:	80 00       	ld.sh	r0,r0[0x0]
8000178a:	17 d8       	ld.ub	r8,r11[0x5]
8000178c:	00 00       	add	r0,r0
8000178e:	05 24       	ld.uh	r4,r2++
80001790:	80 00       	ld.sh	r0,r0[0x0]
80001792:	18 f4       	st.b	--r12,r4
80001794:	00 00       	add	r0,r0
80001796:	05 1c       	ld.sh	r12,r2++
80001798:	00 00       	add	r0,r0
8000179a:	05 18       	ld.sh	r8,r2++
8000179c:	80 00       	ld.sh	r0,r0[0x0]
8000179e:	17 d4       	ld.ub	r4,r11[0x5]
800017a0:	68 26       	ld.w	r6,r4[0x8]
800017a2:	a1 a8       	sbr	r8,0x0
800017a4:	0e 99       	mov	r9,r7
800017a6:	a1 a9       	sbr	r9,0x0
800017a8:	8d 19       	st.w	r6[0x4],r9
800017aa:	ec 07 00 07 	add	r7,r6,r7
800017ae:	0a 9c       	mov	r12,r5
800017b0:	89 27       	st.w	r4[0x8],r7
800017b2:	8f 18       	st.w	r7[0x4],r8
800017b4:	f0 1f 00 03 	mcall	800017c0 <_malloc_r+0x44c>
800017b8:	ec cc ff f8 	sub	r12,r6,-8
800017bc:	d8 32       	popm	r0-r7,pc
800017be:	00 00       	add	r0,r0
800017c0:	80 00       	ld.sh	r0,r0[0x0]
800017c2:	17 d4       	ld.ub	r4,r11[0x5]

800017c4 <memset>:
800017c4:	18 98       	mov	r8,r12
800017c6:	c0 38       	rjmp	800017cc <memset+0x8>
800017c8:	10 cb       	st.b	r8++,r11
800017ca:	20 1a       	sub	r10,1
800017cc:	58 0a       	cp.w	r10,0
800017ce:	cf d1       	brne	800017c8 <memset+0x4>
800017d0:	5e fc       	retal	r12

800017d2 <__malloc_lock>:
800017d2:	5e fc       	retal	r12

800017d4 <__malloc_unlock>:
800017d4:	5e fc       	retal	r12
800017d6:	d7 03       	nop

800017d8 <_sbrk_r>:
800017d8:	d4 21       	pushm	r4-r7,lr
800017da:	30 08       	mov	r8,0
800017dc:	18 97       	mov	r7,r12
800017de:	48 76       	lddpc	r6,800017f8 <_sbrk_r+0x20>
800017e0:	16 9c       	mov	r12,r11
800017e2:	8d 08       	st.w	r6[0x0],r8
800017e4:	f0 1f 00 06 	mcall	800017fc <_sbrk_r+0x24>
800017e8:	5b fc       	cp.w	r12,-1
800017ea:	c0 51       	brne	800017f4 <_sbrk_r+0x1c>
800017ec:	6c 08       	ld.w	r8,r6[0x0]
800017ee:	58 08       	cp.w	r8,0
800017f0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800017f4:	d8 22       	popm	r4-r7,pc
800017f6:	00 00       	add	r0,r0
800017f8:	00 00       	add	r0,r0
800017fa:	05 80       	ld.ub	r0,r2[0x0]
800017fc:	80 00       	ld.sh	r0,r0[0x0]
800017fe:	18 00       	add	r0,r12

80001800 <_sbrk>:
80001800:	d4 01       	pushm	lr
80001802:	48 c8       	lddpc	r8,80001830 <_sbrk+0x30>
80001804:	70 09       	ld.w	r9,r8[0x0]
80001806:	58 09       	cp.w	r9,0
80001808:	c0 31       	brne	8000180e <_sbrk+0xe>
8000180a:	48 b9       	lddpc	r9,80001834 <_sbrk+0x34>
8000180c:	91 09       	st.w	r8[0x0],r9
8000180e:	48 99       	lddpc	r9,80001830 <_sbrk+0x30>
80001810:	48 aa       	lddpc	r10,80001838 <_sbrk+0x38>
80001812:	72 08       	ld.w	r8,r9[0x0]
80001814:	f0 0c 00 0c 	add	r12,r8,r12
80001818:	14 3c       	cp.w	r12,r10
8000181a:	e0 8b 00 04 	brhi	80001822 <_sbrk+0x22>
8000181e:	93 0c       	st.w	r9[0x0],r12
80001820:	c0 68       	rjmp	8000182c <_sbrk+0x2c>
80001822:	f0 1f 00 07 	mcall	8000183c <_sbrk+0x3c>
80001826:	30 c8       	mov	r8,12
80001828:	99 08       	st.w	r12[0x0],r8
8000182a:	3f f8       	mov	r8,-1
8000182c:	10 9c       	mov	r12,r8
8000182e:	d8 02       	popm	pc
80001830:	00 00       	add	r0,r0
80001832:	05 4c       	ld.w	r12,--r2
80001834:	00 00       	add	r0,r0
80001836:	05 88       	ld.ub	r8,r2[0x0]
80001838:	00 00       	add	r0,r0
8000183a:	e0 00       	*unknown*
8000183c:	80 00       	ld.sh	r0,r0[0x0]
8000183e:	18 40       	or	r0,r12

80001840 <__errno>:
80001840:	48 28       	lddpc	r8,80001848 <__errno+0x8>
80001842:	70 0c       	ld.w	r12,r8[0x0]
80001844:	2f 4c       	sub	r12,-12
80001846:	5e fc       	retal	r12
80001848:	00 00       	add	r0,r0
8000184a:	01 00       	ld.w	r0,r0++

8000184c <_malloc_trim_r>:
8000184c:	d4 21       	pushm	r4-r7,lr
8000184e:	16 95       	mov	r5,r11
80001850:	18 97       	mov	r7,r12
80001852:	f0 1f 00 23 	mcall	800018dc <_malloc_trim_r+0x90>
80001856:	4a 34       	lddpc	r4,800018e0 <_malloc_trim_r+0x94>
80001858:	68 28       	ld.w	r8,r4[0x8]
8000185a:	70 16       	ld.w	r6,r8[0x4]
8000185c:	e0 16 ff fc 	andl	r6,0xfffc
80001860:	ec c8 ff 91 	sub	r8,r6,-111
80001864:	f0 05 01 05 	sub	r5,r8,r5
80001868:	e0 15 ff 80 	andl	r5,0xff80
8000186c:	ea c5 00 80 	sub	r5,r5,128
80001870:	e0 45 00 7f 	cp.w	r5,127
80001874:	e0 8a 00 23 	brle	800018ba <_malloc_trim_r+0x6e>
80001878:	30 0b       	mov	r11,0
8000187a:	0e 9c       	mov	r12,r7
8000187c:	f0 1f 00 1a 	mcall	800018e4 <_malloc_trim_r+0x98>
80001880:	68 28       	ld.w	r8,r4[0x8]
80001882:	0c 08       	add	r8,r6
80001884:	10 3c       	cp.w	r12,r8
80001886:	c1 a1       	brne	800018ba <_malloc_trim_r+0x6e>
80001888:	ea 0b 11 00 	rsub	r11,r5,0
8000188c:	0e 9c       	mov	r12,r7
8000188e:	f0 1f 00 16 	mcall	800018e4 <_malloc_trim_r+0x98>
80001892:	5b fc       	cp.w	r12,-1
80001894:	c1 71       	brne	800018c2 <_malloc_trim_r+0x76>
80001896:	30 0b       	mov	r11,0
80001898:	0e 9c       	mov	r12,r7
8000189a:	f0 1f 00 13 	mcall	800018e4 <_malloc_trim_r+0x98>
8000189e:	68 28       	ld.w	r8,r4[0x8]
800018a0:	f8 08 01 09 	sub	r9,r12,r8
800018a4:	58 f9       	cp.w	r9,15
800018a6:	e0 8a 00 0a 	brle	800018ba <_malloc_trim_r+0x6e>
800018aa:	a1 a9       	sbr	r9,0x0
800018ac:	91 19       	st.w	r8[0x4],r9
800018ae:	48 f8       	lddpc	r8,800018e8 <_malloc_trim_r+0x9c>
800018b0:	70 09       	ld.w	r9,r8[0x0]
800018b2:	48 f8       	lddpc	r8,800018ec <_malloc_trim_r+0xa0>
800018b4:	f8 09 01 09 	sub	r9,r12,r9
800018b8:	91 09       	st.w	r8[0x0],r9
800018ba:	0e 9c       	mov	r12,r7
800018bc:	f0 1f 00 0d 	mcall	800018f0 <_malloc_trim_r+0xa4>
800018c0:	d8 2a       	popm	r4-r7,pc,r12=0
800018c2:	68 28       	ld.w	r8,r4[0x8]
800018c4:	0a 16       	sub	r6,r5
800018c6:	a1 a6       	sbr	r6,0x0
800018c8:	91 16       	st.w	r8[0x4],r6
800018ca:	48 98       	lddpc	r8,800018ec <_malloc_trim_r+0xa0>
800018cc:	70 09       	ld.w	r9,r8[0x0]
800018ce:	0a 19       	sub	r9,r5
800018d0:	0e 9c       	mov	r12,r7
800018d2:	91 09       	st.w	r8[0x0],r9
800018d4:	f0 1f 00 07 	mcall	800018f0 <_malloc_trim_r+0xa4>
800018d8:	da 2a       	popm	r4-r7,pc,r12=1
800018da:	00 00       	add	r0,r0
800018dc:	80 00       	ld.sh	r0,r0[0x0]
800018de:	17 d2       	ld.ub	r2,r11[0x5]
800018e0:	00 00       	add	r0,r0
800018e2:	01 04       	ld.w	r4,r0++
800018e4:	80 00       	ld.sh	r0,r0[0x0]
800018e6:	17 d8       	ld.ub	r8,r11[0x5]
800018e8:	00 00       	add	r0,r0
800018ea:	05 10       	ld.sh	r0,r2++
800018ec:	00 00       	add	r0,r0
800018ee:	05 24       	ld.uh	r4,r2++
800018f0:	80 00       	ld.sh	r0,r0[0x0]
800018f2:	17 d4       	ld.ub	r4,r11[0x5]

800018f4 <_free_r>:
800018f4:	d4 21       	pushm	r4-r7,lr
800018f6:	16 96       	mov	r6,r11
800018f8:	18 97       	mov	r7,r12
800018fa:	58 0b       	cp.w	r11,0
800018fc:	e0 80 00 c8 	breq	80001a8c <_free_r+0x198>
80001900:	f0 1f 00 4c 	mcall	80001a30 <_free_r+0x13c>
80001904:	20 86       	sub	r6,8
80001906:	4c ca       	lddpc	r10,80001a34 <_free_r+0x140>
80001908:	6c 18       	ld.w	r8,r6[0x4]
8000190a:	74 2e       	ld.w	lr,r10[0x8]
8000190c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001910:	a1 c8       	cbr	r8,0x0
80001912:	ec 08 00 09 	add	r9,r6,r8
80001916:	72 1b       	ld.w	r11,r9[0x4]
80001918:	e0 1b ff fc 	andl	r11,0xfffc
8000191c:	1c 39       	cp.w	r9,lr
8000191e:	c1 d1       	brne	80001958 <_free_r+0x64>
80001920:	f6 08 00 08 	add	r8,r11,r8
80001924:	58 0c       	cp.w	r12,0
80001926:	c0 81       	brne	80001936 <_free_r+0x42>
80001928:	6c 09       	ld.w	r9,r6[0x0]
8000192a:	12 16       	sub	r6,r9
8000192c:	12 08       	add	r8,r9
8000192e:	6c 3b       	ld.w	r11,r6[0xc]
80001930:	6c 29       	ld.w	r9,r6[0x8]
80001932:	97 29       	st.w	r11[0x8],r9
80001934:	93 3b       	st.w	r9[0xc],r11
80001936:	10 99       	mov	r9,r8
80001938:	95 26       	st.w	r10[0x8],r6
8000193a:	a1 a9       	sbr	r9,0x0
8000193c:	8d 19       	st.w	r6[0x4],r9
8000193e:	4b f9       	lddpc	r9,80001a38 <_free_r+0x144>
80001940:	72 09       	ld.w	r9,r9[0x0]
80001942:	12 38       	cp.w	r8,r9
80001944:	c0 63       	brcs	80001950 <_free_r+0x5c>
80001946:	4b e8       	lddpc	r8,80001a3c <_free_r+0x148>
80001948:	0e 9c       	mov	r12,r7
8000194a:	70 0b       	ld.w	r11,r8[0x0]
8000194c:	f0 1f 00 3d 	mcall	80001a40 <_free_r+0x14c>
80001950:	0e 9c       	mov	r12,r7
80001952:	f0 1f 00 3d 	mcall	80001a44 <_free_r+0x150>
80001956:	d8 22       	popm	r4-r7,pc
80001958:	93 1b       	st.w	r9[0x4],r11
8000195a:	58 0c       	cp.w	r12,0
8000195c:	c0 30       	breq	80001962 <_free_r+0x6e>
8000195e:	30 0c       	mov	r12,0
80001960:	c1 08       	rjmp	80001980 <_free_r+0x8c>
80001962:	6c 0e       	ld.w	lr,r6[0x0]
80001964:	f4 c5 ff f8 	sub	r5,r10,-8
80001968:	1c 16       	sub	r6,lr
8000196a:	1c 08       	add	r8,lr
8000196c:	6c 2e       	ld.w	lr,r6[0x8]
8000196e:	0a 3e       	cp.w	lr,r5
80001970:	f9 bc 00 01 	moveq	r12,1
80001974:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001978:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000197c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001980:	f2 0b 00 0e 	add	lr,r9,r11
80001984:	7c 1e       	ld.w	lr,lr[0x4]
80001986:	ed be 00 00 	bld	lr,0x0
8000198a:	c1 30       	breq	800019b0 <_free_r+0xbc>
8000198c:	16 08       	add	r8,r11
8000198e:	58 0c       	cp.w	r12,0
80001990:	c0 c1       	brne	800019a8 <_free_r+0xb4>
80001992:	4a 9e       	lddpc	lr,80001a34 <_free_r+0x140>
80001994:	72 2b       	ld.w	r11,r9[0x8]
80001996:	2f 8e       	sub	lr,-8
80001998:	1c 3b       	cp.w	r11,lr
8000199a:	c0 71       	brne	800019a8 <_free_r+0xb4>
8000199c:	97 36       	st.w	r11[0xc],r6
8000199e:	97 26       	st.w	r11[0x8],r6
800019a0:	8d 2b       	st.w	r6[0x8],r11
800019a2:	8d 3b       	st.w	r6[0xc],r11
800019a4:	30 1c       	mov	r12,1
800019a6:	c0 58       	rjmp	800019b0 <_free_r+0xbc>
800019a8:	72 2b       	ld.w	r11,r9[0x8]
800019aa:	72 39       	ld.w	r9,r9[0xc]
800019ac:	93 2b       	st.w	r9[0x8],r11
800019ae:	97 39       	st.w	r11[0xc],r9
800019b0:	10 99       	mov	r9,r8
800019b2:	ec 08 09 08 	st.w	r6[r8],r8
800019b6:	a1 a9       	sbr	r9,0x0
800019b8:	8d 19       	st.w	r6[0x4],r9
800019ba:	58 0c       	cp.w	r12,0
800019bc:	c6 51       	brne	80001a86 <_free_r+0x192>
800019be:	e0 48 01 ff 	cp.w	r8,511
800019c2:	e0 8b 00 13 	brhi	800019e8 <_free_r+0xf4>
800019c6:	a3 98       	lsr	r8,0x3
800019c8:	f4 08 00 39 	add	r9,r10,r8<<0x3
800019cc:	72 2b       	ld.w	r11,r9[0x8]
800019ce:	8d 39       	st.w	r6[0xc],r9
800019d0:	8d 2b       	st.w	r6[0x8],r11
800019d2:	97 36       	st.w	r11[0xc],r6
800019d4:	93 26       	st.w	r9[0x8],r6
800019d6:	a3 48       	asr	r8,0x2
800019d8:	74 19       	ld.w	r9,r10[0x4]
800019da:	30 1b       	mov	r11,1
800019dc:	f6 08 09 48 	lsl	r8,r11,r8
800019e0:	f3 e8 10 08 	or	r8,r9,r8
800019e4:	95 18       	st.w	r10[0x4],r8
800019e6:	c5 08       	rjmp	80001a86 <_free_r+0x192>
800019e8:	f0 0b 16 09 	lsr	r11,r8,0x9
800019ec:	58 4b       	cp.w	r11,4
800019ee:	e0 8b 00 06 	brhi	800019fa <_free_r+0x106>
800019f2:	f0 0b 16 06 	lsr	r11,r8,0x6
800019f6:	2c 8b       	sub	r11,-56
800019f8:	c2 b8       	rjmp	80001a4e <_free_r+0x15a>
800019fa:	59 4b       	cp.w	r11,20
800019fc:	e0 8b 00 04 	brhi	80001a04 <_free_r+0x110>
80001a00:	2a 5b       	sub	r11,-91
80001a02:	c2 68       	rjmp	80001a4e <_free_r+0x15a>
80001a04:	e0 4b 00 54 	cp.w	r11,84
80001a08:	e0 8b 00 06 	brhi	80001a14 <_free_r+0x120>
80001a0c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001a10:	29 2b       	sub	r11,-110
80001a12:	c1 e8       	rjmp	80001a4e <_free_r+0x15a>
80001a14:	e0 4b 01 54 	cp.w	r11,340
80001a18:	e0 8b 00 06 	brhi	80001a24 <_free_r+0x130>
80001a1c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001a20:	28 9b       	sub	r11,-119
80001a22:	c1 68       	rjmp	80001a4e <_free_r+0x15a>
80001a24:	e0 4b 05 54 	cp.w	r11,1364
80001a28:	e0 88 00 10 	brls	80001a48 <_free_r+0x154>
80001a2c:	37 eb       	mov	r11,126
80001a2e:	c1 08       	rjmp	80001a4e <_free_r+0x15a>
80001a30:	80 00       	ld.sh	r0,r0[0x0]
80001a32:	17 d2       	ld.ub	r2,r11[0x5]
80001a34:	00 00       	add	r0,r0
80001a36:	01 04       	ld.w	r4,r0++
80001a38:	00 00       	add	r0,r0
80001a3a:	05 0c       	ld.w	r12,r2++
80001a3c:	00 00       	add	r0,r0
80001a3e:	05 20       	ld.uh	r0,r2++
80001a40:	80 00       	ld.sh	r0,r0[0x0]
80001a42:	18 4c       	or	r12,r12
80001a44:	80 00       	ld.sh	r0,r0[0x0]
80001a46:	17 d4       	ld.ub	r4,r11[0x5]
80001a48:	f0 0b 16 12 	lsr	r11,r8,0x12
80001a4c:	28 4b       	sub	r11,-124
80001a4e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001a52:	78 29       	ld.w	r9,r12[0x8]
80001a54:	18 39       	cp.w	r9,r12
80001a56:	c0 e1       	brne	80001a72 <_free_r+0x17e>
80001a58:	74 18       	ld.w	r8,r10[0x4]
80001a5a:	a3 4b       	asr	r11,0x2
80001a5c:	30 1c       	mov	r12,1
80001a5e:	f8 0b 09 4b 	lsl	r11,r12,r11
80001a62:	f1 eb 10 0b 	or	r11,r8,r11
80001a66:	12 98       	mov	r8,r9
80001a68:	95 1b       	st.w	r10[0x4],r11
80001a6a:	c0 a8       	rjmp	80001a7e <_free_r+0x18a>
80001a6c:	72 29       	ld.w	r9,r9[0x8]
80001a6e:	18 39       	cp.w	r9,r12
80001a70:	c0 60       	breq	80001a7c <_free_r+0x188>
80001a72:	72 1a       	ld.w	r10,r9[0x4]
80001a74:	e0 1a ff fc 	andl	r10,0xfffc
80001a78:	14 38       	cp.w	r8,r10
80001a7a:	cf 93       	brcs	80001a6c <_free_r+0x178>
80001a7c:	72 38       	ld.w	r8,r9[0xc]
80001a7e:	8d 38       	st.w	r6[0xc],r8
80001a80:	8d 29       	st.w	r6[0x8],r9
80001a82:	93 36       	st.w	r9[0xc],r6
80001a84:	91 26       	st.w	r8[0x8],r6
80001a86:	0e 9c       	mov	r12,r7
80001a88:	f0 1f 00 02 	mcall	80001a90 <_free_r+0x19c>
80001a8c:	d8 22       	popm	r4-r7,pc
80001a8e:	00 00       	add	r0,r0
80001a90:	80 00       	ld.sh	r0,r0[0x0]
80001a92:	17 d4       	ld.ub	r4,r11[0x5]

Disassembly of section .exception:

80001c00 <_evba>:
	...

80001c28 <_handle_Privilege_Violation>:
80001c28:	c7 a8       	rjmp	80001d1c <privilegedCalls>
	...

80001d00 <_handle_Supervisor_Call>:
80001d00:	1c 9f       	mov	pc,lr

80001d02 <_int0>:
80001d02:	e0 6c 08 00 	mov	r12,2048
80001d06:	ea 1c ff ff 	orh	r12,0xffff
80001d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
80001d0e:	e0 1c 00 01 	andl	r12,0x1
80001d12:	58 1c       	cp.w	r12,1
80001d14:	c0 31       	brne	80001d1a <_int0_exit>
80001d16:	4b 9c       	lddpc	r12,80001df8 <contextRestoreFromISR+0x40>
80001d18:	18 9f       	mov	pc,r12

80001d1a <_int0_exit>:
80001d1a:	d6 03       	rete

80001d1c <privilegedCalls>:
80001d1c:	d3 01       	pushm	r11-r12
80001d1e:	7a 3b       	ld.w	r11,sp[0xc]
80001d20:	16 9c       	mov	r12,r11
80001d22:	2f ec       	sub	r12,-2
80001d24:	9b 3c       	st.w	sp[0xc],r12

80001d26 <priv_interruptdisable>:
80001d26:	4b 6c       	lddpc	r12,80001dfc <contextRestoreFromISR+0x44>
80001d28:	18 3b       	cp.w	r11,r12
80001d2a:	c0 61       	brne	80001d36 <priv_interruptenable>
80001d2c:	7a 2c       	ld.w	r12,sp[0x8]
80001d2e:	b1 ac       	sbr	r12,0x10
80001d30:	9b 2c       	st.w	sp[0x8],r12
80001d32:	d3 02       	popm	r11-r12
80001d34:	d6 03       	rete

80001d36 <priv_interruptenable>:
80001d36:	4b 3c       	lddpc	r12,80001e00 <contextRestoreFromISR+0x48>
80001d38:	18 3b       	cp.w	r11,r12
80001d3a:	c0 61       	brne	80001d46 <privexception>
80001d3c:	7a 2c       	ld.w	r12,sp[0x8]
80001d3e:	b1 cc       	cbr	r12,0x10
80001d40:	9b 2c       	st.w	sp[0x8],r12
80001d42:	d3 02       	popm	r11-r12
80001d44:	d6 03       	rete

80001d46 <privexception>:
80001d46:	c0 08       	rjmp	80001d46 <privexception>

80001d48 <interruptInit>:
80001d48:	d7 01       	pushm	r11-r12,lr
80001d4a:	fe cb 00 48 	sub	r11,pc,72
80001d4e:	4a ec       	lddpc	r12,80001e04 <contextRestoreFromISR+0x4c>
80001d50:	18 1b       	sub	r11,r12
80001d52:	30 0c       	mov	r12,0
80001d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e
80001d58:	e0 6c 08 38 	mov	r12,2104
80001d5c:	ea 1c ff ff 	orh	r12,0xffff
80001d60:	99 0b       	st.w	r12[0x0],r11
80001d62:	d7 02       	popm	r11-r12,lr
80001d64:	1c 9f       	mov	pc,lr

80001d66 <interruptDisable>:
80001d66:	d3 03       	ssrf	0x10
80001d68:	1c 9f       	mov	pc,lr

80001d6a <interruptEnable>:
80001d6a:	d5 03       	csrf	0x10
80001d6c:	1c 9f       	mov	pc,lr

80001d6e <isInterruptEnabled>:
80001d6e:	e1 bc 00 00 	mfsr	r12,0x0
80001d72:	b1 8c       	lsr	r12,0x10
80001d74:	e0 1c 00 01 	andl	r12,0x1
80001d78:	ec 1c 00 01 	eorl	r12,0x1
80001d7c:	1c 9f       	mov	pc,lr

80001d7e <contextSaveFromISR>:
80001d7e:	4a 3c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
80001d80:	78 0c       	ld.w	r12,r12[0x0]
80001d82:	99 60       	st.w	r12[0x18],r0
80001d84:	7a 90       	ld.w	r0,sp[0x24]
80001d86:	99 c0       	st.w	r12[0x30],r0
80001d88:	7a 60       	ld.w	r0,sp[0x18]
80001d8a:	99 80       	st.w	r12[0x20],r0
80001d8c:	7a d8       	ld.w	r8,sp[0x34]
80001d8e:	7a c9       	ld.w	r9,sp[0x30]
80001d90:	7a ba       	ld.w	r10,sp[0x2c]
80001d92:	7a ab       	ld.w	r11,sp[0x28]
80001d94:	33 40       	mov	r0,52
80001d96:	18 00       	add	r0,r12
80001d98:	ed c0 0f ff 	stmts	r0,r0-r11
80001d9c:	7a 50       	ld.w	r0,sp[0x14]
80001d9e:	f9 40 00 44 	st.w	r12[68],r0
80001da2:	7a 70       	ld.w	r0,sp[0x1c]
80001da4:	99 90       	st.w	r12[0x24],r0
80001da6:	7a 80       	ld.w	r0,sp[0x20]
80001da8:	99 a0       	st.w	r12[0x28],r0
80001daa:	1a 90       	mov	r0,sp
80001dac:	1a d0       	st.w	--sp,r0
80001dae:	ed cd 20 00 	stmts	sp,sp
80001db2:	1b 00       	ld.w	r0,sp++
80001db4:	99 50       	st.w	r12[0x14],r0
80001db6:	1c 9f       	mov	pc,lr

80001db8 <contextRestoreFromISR>:
80001db8:	49 4c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
80001dba:	78 0c       	ld.w	r12,r12[0x0]
80001dbc:	78 50       	ld.w	r0,r12[0x14]
80001dbe:	1a d0       	st.w	--sp,r0
80001dc0:	e5 cd 20 00 	ldmts	sp,sp
80001dc4:	1b 00       	ld.w	r0,sp++
80001dc6:	78 a0       	ld.w	r0,r12[0x28]
80001dc8:	9b 80       	st.w	sp[0x20],r0
80001dca:	78 90       	ld.w	r0,r12[0x24]
80001dcc:	9b 70       	st.w	sp[0x1c],r0
80001dce:	33 40       	mov	r0,52
80001dd0:	18 00       	add	r0,r12
80001dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11
80001dd6:	78 80       	ld.w	r0,r12[0x20]
80001dd8:	9b 60       	st.w	sp[0x18],r0
80001dda:	78 c0       	ld.w	r0,r12[0x30]
80001ddc:	9b 90       	st.w	sp[0x24],r0
80001dde:	9b ab       	st.w	sp[0x28],r11
80001de0:	9b ba       	st.w	sp[0x2c],r10
80001de2:	9b c9       	st.w	sp[0x30],r9
80001de4:	9b d8       	st.w	sp[0x34],r8
80001de6:	79 10       	ld.w	r0,r12[0x44]
80001de8:	9b 50       	st.w	sp[0x14],r0
80001dea:	78 60       	ld.w	r0,r12[0x18]
80001dec:	d4 01       	pushm	lr
80001dee:	f0 1f 00 08 	mcall	80001e0c <contextRestoreFromISR+0x54>
80001df2:	d4 02       	popm	lr
80001df4:	1c 9f       	mov	pc,lr
80001df6:	00 00       	add	r0,r0
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	0a c8       	st.b	r5++,r8
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1d 66       	ld.uh	r6,--lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1d 6a       	ld.uh	r10,--lr
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	00 00       	add	r0,r0
80001e0a:	05 7c       	ld.ub	r12,--r2
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	11 da       	ld.ub	r10,r8[0x5]
	...
