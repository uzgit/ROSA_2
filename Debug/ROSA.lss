
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000bc0  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000400  80000c00  80000c00  00001000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  80001000  80001000  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  5 .data         00000008  00000008  80001020  00001808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d8  00000010  00000010  00000000  2**2
                  ALLOC
  7 .heap         0000dd18  000002e8  000002e8  00000000  2**0
                  ALLOC
  8 .comment      000000bc  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000260  00000000  00000000  000018d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 0000033a  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004580  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000a2b  00000000  00000000  000063ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000015c9  00000000  00000000  00006e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000004c8  00000000  00000000  000083e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000bcc  00000000  00000000  000088a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000662  00000000  00000000  00009474  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00451f1d  00000000  00000000  00009ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 000001d0  00000000  00000000  0045b9f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0b 48       	ld.w	r8,--r5

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 31     ............tsk1
80000018:	00 00 00 00 74 73 6b 32 00 00 00 00                 ....tsk2....

80000024 <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
80000024:	eb cd 40 80 	pushm	r7,lr
80000028:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
8000002a:	33 bc       	mov	r12,59
8000002c:	f0 1f 00 0c 	mcall	8000005c <task1+0x38>
		ledOff(LED1_GPIO);
80000030:	33 cc       	mov	r12,60
80000032:	f0 1f 00 0c 	mcall	80000060 <task1+0x3c>
		delay_ms(abs(1000 - getTicks()));
80000036:	f0 1f 00 0c 	mcall	80000064 <task1+0x40>
8000003a:	14 98       	mov	r8,r10
8000003c:	16 99       	mov	r9,r11
8000003e:	e0 6a 03 e8 	mov	r10,1000
80000042:	30 0b       	mov	r11,0
80000044:	f4 08 01 08 	sub	r8,r10,r8
80000048:	f6 09 01 49 	sbc	r9,r11,r9
8000004c:	5c 48       	abs	r8
8000004e:	10 9c       	mov	r12,r8
80000050:	f0 1f 00 06 	mcall	80000068 <task1+0x44>
		ROSA_yield();
80000054:	f0 1f 00 06 	mcall	8000006c <task1+0x48>
	}
80000058:	ce 9b       	rjmp	8000002a <task1+0x6>
8000005a:	00 00       	add	r0,r0
8000005c:	80 00       	ld.sh	r0,r0[0x0]
8000005e:	07 78       	ld.ub	r8,--r3
80000060:	80 00       	ld.sh	r0,r0[0x0]
80000062:	07 98       	ld.ub	r8,r3[0x1]
80000064:	80 00       	ld.sh	r0,r0[0x0]
80000066:	04 f8       	st.b	--r2,r8
80000068:	80 00       	ld.sh	r0,r0[0x0]
8000006a:	05 70       	ld.ub	r0,--r2
8000006c:	80 00       	ld.sh	r0,r0[0x0]
8000006e:	03 ba       	ld.ub	r10,r1[0x3]

80000070 <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
	while(1) {
		ledOff(LED0_GPIO);
80000076:	33 bc       	mov	r12,59
80000078:	f0 1f 00 0b 	mcall	800000a4 <task2+0x34>
		ledOn(LED1_GPIO);
8000007c:	33 cc       	mov	r12,60
8000007e:	f0 1f 00 0b 	mcall	800000a8 <task2+0x38>
		delay_ms(abs(getTicks() - 1000));
80000082:	f0 1f 00 0b 	mcall	800000ac <task2+0x3c>
80000086:	fe 78 fc 18 	mov	r8,-1000
8000008a:	3f f9       	mov	r9,-1
8000008c:	f4 08 00 08 	add	r8,r10,r8
80000090:	f6 09 00 49 	adc	r9,r11,r9
80000094:	5c 48       	abs	r8
80000096:	10 9c       	mov	r12,r8
80000098:	f0 1f 00 06 	mcall	800000b0 <task2+0x40>
		ROSA_yield();
8000009c:	f0 1f 00 06 	mcall	800000b4 <task2+0x44>
	}
800000a0:	ce bb       	rjmp	80000076 <task2+0x6>
800000a2:	00 00       	add	r0,r0
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	07 98       	ld.ub	r8,r3[0x1]
800000a8:	80 00       	ld.sh	r0,r0[0x0]
800000aa:	07 78       	ld.ub	r8,--r3
800000ac:	80 00       	ld.sh	r0,r0[0x0]
800000ae:	04 f8       	st.b	--r2,r8
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	05 70       	ld.ub	r0,--r2
800000b4:	80 00       	ld.sh	r0,r0[0x0]
800000b6:	03 ba       	ld.ub	r10,r1[0x3]

800000b8 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800000b8:	eb cd 40 80 	pushm	r7,lr
800000bc:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800000be:	f0 1f 00 0d 	mcall	800000f0 <main+0x38>

	//Create tasks and install them into the ROSA kernel
	ROSA_tcbCreate(&t1_tcb, "tsk1", task1, t1_stack, T1_STACK_SIZE);
800000c2:	34 08       	mov	r8,64
800000c4:	48 c9       	lddpc	r9,800000f4 <main+0x3c>
800000c6:	48 da       	lddpc	r10,800000f8 <main+0x40>
800000c8:	48 db       	lddpc	r11,800000fc <main+0x44>
800000ca:	48 ec       	lddpc	r12,80000100 <main+0x48>
800000cc:	f0 1f 00 0e 	mcall	80000104 <main+0x4c>
	ROSA_tcbInstall(&t1_tcb);
800000d0:	48 cc       	lddpc	r12,80000100 <main+0x48>
800000d2:	f0 1f 00 0e 	mcall	80000108 <main+0x50>
	ROSA_tcbCreate(&t2_tcb, "tsk2", task2, t2_stack, T2_STACK_SIZE);
800000d6:	34 08       	mov	r8,64
800000d8:	48 d9       	lddpc	r9,8000010c <main+0x54>
800000da:	48 ea       	lddpc	r10,80000110 <main+0x58>
800000dc:	48 eb       	lddpc	r11,80000114 <main+0x5c>
800000de:	48 fc       	lddpc	r12,80000118 <main+0x60>
800000e0:	f0 1f 00 09 	mcall	80000104 <main+0x4c>
	ROSA_tcbInstall(&t2_tcb);
800000e4:	48 dc       	lddpc	r12,80000118 <main+0x60>
800000e6:	f0 1f 00 09 	mcall	80000108 <main+0x50>

	//Start the ROSA kernel
	ROSA_start();
800000ea:	f0 1f 00 0d 	mcall	8000011c <main+0x64>
	/* Execution will never return here */
	while(1);
800000ee:	c0 08       	rjmp	800000ee <main+0x36>
800000f0:	80 00       	ld.sh	r0,r0[0x0]
800000f2:	01 50       	ld.sh	r0,--r0
800000f4:	00 00       	add	r0,r0
800000f6:	00 10       	sub	r0,r0
800000f8:	80 00       	ld.sh	r0,r0[0x0]
800000fa:	00 24       	rsub	r4,r0
800000fc:	80 00       	ld.sh	r0,r0[0x0]
800000fe:	00 14       	sub	r4,r0
80000100:	00 00       	add	r0,r0
80000102:	01 10       	ld.sh	r0,r0++
80000104:	80 00       	ld.sh	r0,r0[0x0]
80000106:	01 d0       	ld.ub	r0,r0[0x5]
80000108:	80 00       	ld.sh	r0,r0[0x0]
8000010a:	02 84       	andn	r4,r1
8000010c:	00 00       	add	r0,r0
8000010e:	01 74       	ld.ub	r4,--r0
80000110:	80 00       	ld.sh	r0,r0[0x0]
80000112:	00 70       	tst	r0,r0
80000114:	80 00       	ld.sh	r0,r0[0x0]
80000116:	00 1c       	sub	r12,r0
80000118:	00 00       	add	r0,r0
8000011a:	02 74       	tst	r4,r1
8000011c:	80 00       	ld.sh	r0,r0[0x0]
8000011e:	02 f8       	st.b	--r1,r8

80000120 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000120:	eb cd 40 80 	pushm	r7,lr
80000124:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
80000126:	f0 1f 00 05 	mcall	80000138 <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000012a:	f0 1f 00 05 	mcall	8000013c <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it.
8000012e:	f0 1f 00 05 	mcall	80000140 <ROSA_yieldFromISR+0x20>
}
80000132:	e3 cd 80 80 	ldm	sp++,r7,pc
80000136:	00 00       	add	r0,r0
80000138:	80 00       	ld.sh	r0,r0[0x0]
8000013a:	0d 7e       	ld.ub	lr,--r6
8000013c:	80 00       	ld.sh	r0,r0[0x0]
8000013e:	03 d8       	ld.ub	r8,r1[0x5]
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	0d b8       	ld.ub	r8,r6[0x3]

80000144 <usart_options>:
80000144:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000150 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000150:	eb cd 40 80 	pushm	r7,lr
80000154:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000156:	f0 1f 00 13 	mcall	800001a0 <ROSA_init+0x50>
	buttonInit();								//Buttons
8000015a:	f0 1f 00 13 	mcall	800001a4 <ROSA_init+0x54>
	joystickInit();								//Joystick
8000015e:	f0 1f 00 13 	mcall	800001a8 <ROSA_init+0x58>
	potInit();									//Potentiometer
80000162:	f0 1f 00 13 	mcall	800001ac <ROSA_init+0x5c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000166:	e0 6a 1b 00 	mov	r10,6912
8000016a:	ea 1a 00 b7 	orh	r10,0xb7
8000016e:	49 1b       	lddpc	r11,800001b0 <ROSA_init+0x60>
80000170:	fe 7c 14 00 	mov	r12,-60416
80000174:	f0 1f 00 10 	mcall	800001b4 <ROSA_init+0x64>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000178:	49 08       	lddpc	r8,800001b8 <ROSA_init+0x68>
8000017a:	30 09       	mov	r9,0
8000017c:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000017e:	49 08       	lddpc	r8,800001bc <ROSA_init+0x6c>
80000180:	30 09       	mov	r9,0
80000182:	91 09       	st.w	r8[0x0],r9

	//Initialize the timer to 100 ms period.
	//...
	interruptInit();
80000184:	f0 1f 00 0f 	mcall	800001c0 <ROSA_init+0x70>
	ticks = 0;
80000188:	48 fa       	lddpc	r10,800001c4 <ROSA_init+0x74>
8000018a:	30 08       	mov	r8,0
8000018c:	30 09       	mov	r9,0
8000018e:	f4 e9 00 00 	st.d	r10[0],r8
	timerInit(100);
80000192:	36 4c       	mov	r12,100
80000194:	f0 1f 00 0d 	mcall	800001c8 <ROSA_init+0x78>
	timerStart();
80000198:	f0 1f 00 0d 	mcall	800001cc <ROSA_init+0x7c>
	//...
}
8000019c:	e3 cd 80 80 	ldm	sp++,r7,pc
800001a0:	80 00       	ld.sh	r0,r0[0x0]
800001a2:	06 ec       	st.h	--r3,r12
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	05 10       	ld.sh	r0,r2++
800001a8:	80 00       	ld.sh	r0,r0[0x0]
800001aa:	05 38       	ld.ub	r8,r2++
800001ac:	80 00       	ld.sh	r0,r0[0x0]
800001ae:	07 b8       	ld.ub	r8,r3[0x3]
800001b0:	80 00       	ld.sh	r0,r0[0x0]
800001b2:	01 44       	ld.w	r4,--r0
800001b4:	80 00       	ld.sh	r0,r0[0x0]
800001b6:	09 6c       	ld.uh	r12,--r4
800001b8:	00 00       	add	r0,r0
800001ba:	02 e0       	st.h	--r1,r0
800001bc:	00 00       	add	r0,r0
800001be:	02 e4       	st.h	--r1,r4
800001c0:	80 00       	ld.sh	r0,r0[0x0]
800001c2:	0d 48       	ld.w	r8,--r6
800001c4:	00 00       	add	r0,r0
800001c6:	02 d8       	st.w	--r1,r8
800001c8:	80 00       	ld.sh	r0,r0[0x0]
800001ca:	0a 90       	mov	r0,r5
800001cc:	80 00       	ld.sh	r0,r0[0x0]
800001ce:	0a be       	st.h	r5++,lr

800001d0 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800001d0:	eb cd 40 80 	pushm	r7,lr
800001d4:	1a 97       	mov	r7,sp
800001d6:	20 6d       	sub	sp,24
800001d8:	ef 4c ff f8 	st.w	r7[-8],r12
800001dc:	ef 4b ff f4 	st.w	r7[-12],r11
800001e0:	ef 4a ff f0 	st.w	r7[-16],r10
800001e4:	ef 49 ff ec 	st.w	r7[-20],r9
800001e8:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800001ec:	30 08       	mov	r8,0
800001ee:	ef 48 ff fc 	st.w	r7[-4],r8
800001f2:	c1 48       	rjmp	8000021a <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800001f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800001f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800001fc:	ee fa ff f4 	ld.w	r10,r7[-12]
80000200:	f4 08 00 08 	add	r8,r10,r8
80000204:	11 88       	ld.ub	r8,r8[0x0]
80000206:	ee fa ff f8 	ld.w	r10,r7[-8]
8000020a:	f4 09 00 09 	add	r9,r10,r9
8000020e:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000210:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000214:	2f f8       	sub	r8,-1
80000216:	ef 48 ff fc 	st.w	r7[-4],r8
8000021a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000021e:	58 38       	cp.w	r8,3
80000220:	fe 9a ff ea 	brle	800001f4 <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000224:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000228:	30 09       	mov	r9,0
8000022a:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
8000022c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000234:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000236:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000023a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000023e:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000244:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000248:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000024a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000024e:	a3 68       	lsl	r8,0x2
80000250:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000254:	10 09       	add	r9,r8
80000256:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000025a:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
8000025c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000260:	70 39       	ld.w	r9,r8[0xc]
80000262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000266:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000026c:	fc 19 00 1c 	movh	r9,0x1c
80000270:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000272:	ee fc ff f8 	ld.w	r12,r7[-8]
80000276:	f0 1f 00 03 	mcall	80000280 <ROSA_tcbCreate+0xb0>
}
8000027a:	2f ad       	sub	sp,-24
8000027c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	03 2e       	ld.uh	lr,r1++

80000284 <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
80000284:	eb cd 40 80 	pushm	r7,lr
80000288:	1a 97       	mov	r7,sp
8000028a:	20 2d       	sub	sp,8
8000028c:	ef 4c ff f8 	st.w	r7[-8],r12
	tcb * tcbTmp;

	/* Is this the first tcb installed? */
	if(TCBLIST == NULL) {
80000290:	49 98       	lddpc	r8,800002f4 <ROSA_tcbInstall+0x70>
80000292:	70 08       	ld.w	r8,r8[0x0]
80000294:	58 08       	cp.w	r8,0
80000296:	c1 01       	brne	800002b6 <ROSA_tcbInstall+0x32>
		TCBLIST = tcbTask;
80000298:	49 78       	lddpc	r8,800002f4 <ROSA_tcbInstall+0x70>
8000029a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000029e:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
800002a0:	49 58       	lddpc	r8,800002f4 <ROSA_tcbInstall+0x70>
800002a2:	70 08       	ld.w	r8,r8[0x0]
800002a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002a8:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
800002aa:	49 38       	lddpc	r8,800002f4 <ROSA_tcbInstall+0x70>
800002ac:	70 09       	ld.w	r9,r8[0x0]
800002ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002b2:	91 09       	st.w	r8[0x0],r9
800002b4:	c1 c8       	rjmp	800002ec <ROSA_tcbInstall+0x68>
	}
	else {
		tcbTmp = TCBLIST;					//Find last tcb in the list
800002b6:	49 08       	lddpc	r8,800002f4 <ROSA_tcbInstall+0x70>
800002b8:	70 08       	ld.w	r8,r8[0x0]
800002ba:	ef 48 ff fc 	st.w	r7[-4],r8
		while(tcbTmp->nexttcb != TCBLIST) {
800002be:	c0 68       	rjmp	800002ca <ROSA_tcbInstall+0x46>
			tcbTmp = tcbTmp->nexttcb;
800002c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002c4:	70 08       	ld.w	r8,r8[0x0]
800002c6:	ef 48 ff fc 	st.w	r7[-4],r8
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
	else {
		tcbTmp = TCBLIST;					//Find last tcb in the list
		while(tcbTmp->nexttcb != TCBLIST) {
800002ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ce:	70 09       	ld.w	r9,r8[0x0]
800002d0:	48 98       	lddpc	r8,800002f4 <ROSA_tcbInstall+0x70>
800002d2:	70 08       	ld.w	r8,r8[0x0]
800002d4:	10 39       	cp.w	r9,r8
800002d6:	cf 51       	brne	800002c0 <ROSA_tcbInstall+0x3c>
			tcbTmp = tcbTmp->nexttcb;
		}
		tcbTmp->nexttcb = tcbTask;			//Install tcb last in the list
800002d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800002e0:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
800002e2:	48 58       	lddpc	r8,800002f4 <ROSA_tcbInstall+0x70>
800002e4:	70 09       	ld.w	r9,r8[0x0]
800002e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002ea:	91 09       	st.w	r8[0x0],r9
	}
}
800002ec:	2f ed       	sub	sp,-8
800002ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800002f2:	00 00       	add	r0,r0
800002f4:	00 00       	add	r0,r0
800002f6:	02 e0       	st.h	--r1,r0

800002f8 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800002f8:	4b 5c       	lddpc	r12,800003cc <_yield+0xa>
	lda.w r11,EXECTASK
800002fa:	4b 6b       	lddpc	r11,800003d0 <_yield+0xe>
	ld.w r12,r12[0x0]
800002fc:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800002fe:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000300:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000302:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000304:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000308:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000030a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
8000030c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000030e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000312:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000314:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000316:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000318:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000031a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
8000031c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000031e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000320:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000322:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000324:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000326:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000328:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000032a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
8000032c:	1c 9f       	mov	pc,lr

8000032e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000032e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000330:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000332:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000334:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000338:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
8000033c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000340:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000344:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000348:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
8000034c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000350:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000354:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000358:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
8000035a:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
8000035c:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
8000035e:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000360:	1c 9f       	mov	pc,lr

80000362 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000362:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000364:	49 bc       	lddpc	r12,800003d0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000366:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000368:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
8000036a:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
8000036c:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
8000036e:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000370:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000372:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000374:	33 40       	mov	r0,52
	add r0,r12
80000376:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000378:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
8000037c:	1a 90       	mov	r0,sp
	st.w --sp,r0
8000037e:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000380:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000384:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000386:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000388:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
8000038a:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
8000038c:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
8000038e:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000390:	1c 9f       	mov	pc,lr

80000392 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000392:	49 0c       	lddpc	r12,800003d0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000394:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000396:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000398:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
8000039a:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
8000039e:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800003a0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800003a2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800003a4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800003a6:	33 40       	mov	r0,52
	add r0,r12
800003a8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800003aa:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800003ae:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
800003b0:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800003b2:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800003b4:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800003b6:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800003b8:	d6 13       	rets

800003ba <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800003ba:	d4 01       	pushm	lr
	lda.w lr,_yield
800003bc:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800003c0:	d7 33       	scall

800003c2 <_yield>:
_yield:
	call contextSave
800003c2:	cd 0f       	rcall	80000362 <contextSave>
	call scheduler
800003c4:	f0 1f 00 04 	mcall	800003d4 <_yield+0x12>
	call contextRestore
800003c8:	ce 5f       	rcall	80000392 <contextRestore>
800003ca:	00 00       	add	r0,r0
800003cc:	00 00       	add	r0,r0
800003ce:	02 e0       	st.h	--r1,r0
800003d0:	00 00       	add	r0,r0
800003d2:	02 e4       	st.h	--r1,r4
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	03 d8       	ld.ub	r8,r1[0x5]

800003d8 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800003d8:	eb cd 40 80 	pushm	r7,lr
800003dc:	1a 97       	mov	r7,sp
	//Find the next task to execute
	EXECTASK = EXECTASK->nexttcb;
800003de:	48 48       	lddpc	r8,800003ec <scheduler+0x14>
800003e0:	70 08       	ld.w	r8,r8[0x0]
800003e2:	70 09       	ld.w	r9,r8[0x0]
800003e4:	48 28       	lddpc	r8,800003ec <scheduler+0x14>
800003e6:	91 09       	st.w	r8[0x0],r9
}
800003e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800003ec:	00 00       	add	r0,r0
800003ee:	02 e4       	st.h	--r1,r4

800003f0 <C.2.9450>:
800003f0:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000400 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000400:	eb cd 40 80 	pushm	r7,lr
80000404:	1a 97       	mov	r7,sp
80000406:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000408:	fe 78 38 00 	mov	r8,-51200
8000040c:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000414:	70 88       	ld.w	r8,r8[0x20]
80000416:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
8000041a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000041e:	e2 18 00 10 	andl	r8,0x10,COH
80000422:	c0 f0       	breq	80000440 <timerISR+0x40>
	{
		ticks ++;
80000424:	48 98       	lddpc	r8,80000448 <timerISR+0x48>
80000426:	f0 ea 00 00 	ld.d	r10,r8[0]
8000042a:	30 18       	mov	r8,1
8000042c:	30 09       	mov	r9,0
8000042e:	f4 08 00 08 	add	r8,r10,r8
80000432:	f6 09 00 49 	adc	r9,r11,r9
80000436:	48 5a       	lddpc	r10,80000448 <timerISR+0x48>
80000438:	f4 e9 00 00 	st.d	r10[0],r8
		ROSA_yieldFromISR();
8000043c:	f0 1f 00 04 	mcall	8000044c <timerISR+0x4c>
	}
}
80000440:	2f ed       	sub	sp,-8
80000442:	e3 cd 40 80 	ldm	sp++,r7,lr
80000446:	d6 03       	rete
80000448:	00 00       	add	r0,r0
8000044a:	02 d8       	st.w	--r1,r8
8000044c:	80 00       	ld.sh	r0,r0[0x0]
8000044e:	01 20       	ld.uh	r0,r0++

80000450 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000450:	eb cd 40 80 	pushm	r7,lr
80000454:	1a 97       	mov	r7,sp
80000456:	20 7d       	sub	sp,28
80000458:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
8000045c:	4a 48       	lddpc	r8,800004ec <timerPeriodSet+0x9c>
8000045e:	ee ca 00 18 	sub	r10,r7,24
80000462:	10 9b       	mov	r11,r8
80000464:	f6 e8 00 00 	ld.d	r8,r11[0]
80000468:	f4 e9 00 00 	st.d	r10[0],r8
8000046c:	f6 e8 00 08 	ld.d	r8,r11[8]
80000470:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000474:	30 48       	mov	r8,4
80000476:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000047a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000047e:	20 18       	sub	r8,1
80000480:	a3 68       	lsl	r8,0x2
80000482:	ee 08 00 08 	add	r8,r7,r8
80000486:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000048a:	e0 68 1b 00 	mov	r8,6912
8000048e:	ea 18 00 b7 	orh	r8,0xb7
80000492:	f0 09 0c 08 	divs	r8,r8,r9
80000496:	10 99       	mov	r9,r8
80000498:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000049c:	b1 39       	mul	r9,r8
8000049e:	e0 68 4d d3 	mov	r8,19923
800004a2:	ea 18 10 62 	orh	r8,0x1062
800004a6:	f2 08 06 48 	mulu.d	r8,r9,r8
800004aa:	f2 08 16 06 	lsr	r8,r9,0x6
800004ae:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
800004b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800004b6:	f0 1f 00 0f 	mcall	800004f0 <timerPeriodSet+0xa0>
	timerRCSet(rc);
800004ba:	ee fc ff f8 	ld.w	r12,r7[-8]
800004be:	f0 1f 00 0e 	mcall	800004f4 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
800004c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ca:	f2 08 02 4a 	mul	r10,r9,r8
800004ce:	e0 68 9f 81 	mov	r8,40833
800004d2:	ea 18 16 5e 	orh	r8,0x165e
800004d6:	f4 08 04 48 	muls.d	r8,r10,r8
800004da:	b5 49       	asr	r9,0x14
800004dc:	f4 08 14 1f 	asr	r8,r10,0x1f
800004e0:	f2 08 01 08 	sub	r8,r9,r8
}
800004e4:	10 9c       	mov	r12,r8
800004e6:	2f 9d       	sub	sp,-28
800004e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800004ec:	80 00       	ld.sh	r0,r0[0x0]
800004ee:	03 f0       	ld.ub	r0,r1[0x7]
800004f0:	80 00       	ld.sh	r0,r0[0x0]
800004f2:	0b 04       	ld.w	r4,r5++
800004f4:	80 00       	ld.sh	r0,r0[0x0]
800004f6:	0a ee       	st.h	--r5,lr

800004f8 <getTicks>:
 * Comment:
 * 	returns the current number of system ticks since start.
 *
 **********************************************************/
int64_t getTicks(void)
{
800004f8:	eb cd 40 80 	pushm	r7,lr
800004fc:	1a 97       	mov	r7,sp
	return ticks;
800004fe:	48 48       	lddpc	r8,8000050c <getTicks+0x14>
80000500:	f0 e8 00 00 	ld.d	r8,r8[0]
80000504:	10 9a       	mov	r10,r8
80000506:	12 9b       	mov	r11,r9
80000508:	e3 cd 80 80 	ldm	sp++,r7,pc
8000050c:	00 00       	add	r0,r0
8000050e:	02 d8       	st.w	--r1,r8

80000510 <buttonInit>:
80000510:	eb cd 40 80 	pushm	r7,lr
80000514:	1a 97       	mov	r7,sp
80000516:	30 1b       	mov	r11,1
80000518:	35 8c       	mov	r12,88
8000051a:	f0 1f 00 07 	mcall	80000534 <buttonInit+0x24>
8000051e:	30 1b       	mov	r11,1
80000520:	35 5c       	mov	r12,85
80000522:	f0 1f 00 05 	mcall	80000534 <buttonInit+0x24>
80000526:	30 1b       	mov	r11,1
80000528:	35 2c       	mov	r12,82
8000052a:	f0 1f 00 03 	mcall	80000534 <buttonInit+0x24>
8000052e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000532:	00 00       	add	r0,r0
80000534:	80 00       	ld.sh	r0,r0[0x0]
80000536:	05 a4       	ld.ub	r4,r2[0x2]

80000538 <joystickInit>:
80000538:	eb cd 40 80 	pushm	r7,lr
8000053c:	1a 97       	mov	r7,sp
8000053e:	30 1b       	mov	r11,1
80000540:	31 bc       	mov	r12,27
80000542:	f0 1f 00 0b 	mcall	8000056c <joystickInit+0x34>
80000546:	30 1b       	mov	r11,1
80000548:	31 9c       	mov	r12,25
8000054a:	f0 1f 00 09 	mcall	8000056c <joystickInit+0x34>
8000054e:	30 1b       	mov	r11,1
80000550:	31 cc       	mov	r12,28
80000552:	f0 1f 00 07 	mcall	8000056c <joystickInit+0x34>
80000556:	30 1b       	mov	r11,1
80000558:	31 4c       	mov	r12,20
8000055a:	f0 1f 00 05 	mcall	8000056c <joystickInit+0x34>
8000055e:	30 1b       	mov	r11,1
80000560:	31 ac       	mov	r12,26
80000562:	f0 1f 00 03 	mcall	8000056c <joystickInit+0x34>
80000566:	e3 cd 80 80 	ldm	sp++,r7,pc
8000056a:	00 00       	add	r0,r0
8000056c:	80 00       	ld.sh	r0,r0[0x0]
8000056e:	05 a4       	ld.ub	r4,r2[0x2]

80000570 <delay_ms>:
80000570:	eb cd 40 80 	pushm	r7,lr
80000574:	1a 97       	mov	r7,sp
80000576:	20 2d       	sub	sp,8
80000578:	ef 4c ff f8 	st.w	r7[-8],r12
8000057c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000580:	e0 69 04 42 	mov	r9,1090
80000584:	b3 38       	mul	r8,r9
80000586:	ef 48 ff fc 	st.w	r7[-4],r8
8000058a:	c0 68       	rjmp	80000596 <delay_ms+0x26>
8000058c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000590:	20 18       	sub	r8,1
80000592:	ef 48 ff fc 	st.w	r7[-4],r8
80000596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000059a:	58 08       	cp.w	r8,0
8000059c:	cf 81       	brne	8000058c <delay_ms+0x1c>
8000059e:	2f ed       	sub	sp,-8
800005a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800005a4 <gpioInit>:
800005a4:	eb cd 40 80 	pushm	r7,lr
800005a8:	1a 97       	mov	r7,sp
800005aa:	20 7d       	sub	sp,28
800005ac:	ef 4c ff ec 	st.w	r7[-20],r12
800005b0:	ef 4b ff e8 	st.w	r7[-24],r11
800005b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800005b8:	a5 58       	asr	r8,0x5
800005ba:	ef 48 ff f4 	st.w	r7[-12],r8
800005be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800005c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800005c6:	ef 48 ff fc 	st.w	r7[-4],r8
800005ca:	30 19       	mov	r9,1
800005cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005d0:	f2 08 09 48 	lsl	r8,r9,r8
800005d4:	ef 48 ff f8 	st.w	r7[-8],r8
800005d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800005dc:	a9 68       	lsl	r8,0x8
800005de:	e0 28 f0 00 	sub	r8,61440
800005e2:	ef 48 ff f0 	st.w	r7[-16],r8
800005e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005ee:	91 19       	st.w	r8[0x4],r9
800005f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005f8:	91 69       	st.w	r8[0x18],r9
800005fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000602:	91 a9       	st.w	r8[0x28],r9
80000604:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000608:	ef 48 ff e4 	st.w	r7[-28],r8
8000060c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000610:	58 08       	cp.w	r8,0
80000612:	c0 60       	breq	8000061e <gpioInit+0x7a>
80000614:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000618:	58 18       	cp.w	r8,1
8000061a:	c0 90       	breq	8000062c <gpioInit+0x88>
8000061c:	c0 f8       	rjmp	8000063a <gpioInit+0x96>
8000061e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000622:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000626:	f1 49 00 44 	st.w	r8[68],r9
8000062a:	c0 e8       	rjmp	80000646 <gpioInit+0xa2>
8000062c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000634:	f1 49 00 48 	st.w	r8[72],r9
80000638:	c0 78       	rjmp	80000646 <gpioInit+0xa2>
8000063a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000063e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000642:	f1 49 00 48 	st.w	r8[72],r9
80000646:	2f 9d       	sub	sp,-28
80000648:	e3 cd 80 80 	ldm	sp++,r7,pc

8000064c <gpioClear>:
8000064c:	eb cd 40 80 	pushm	r7,lr
80000650:	1a 97       	mov	r7,sp
80000652:	20 5d       	sub	sp,20
80000654:	ef 4c ff ec 	st.w	r7[-20],r12
80000658:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000065c:	a5 58       	asr	r8,0x5
8000065e:	ef 48 ff f4 	st.w	r7[-12],r8
80000662:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000666:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000066a:	ef 48 ff fc 	st.w	r7[-4],r8
8000066e:	30 19       	mov	r9,1
80000670:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000674:	f2 08 09 48 	lsl	r8,r9,r8
80000678:	ef 48 ff f8 	st.w	r7[-8],r8
8000067c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000680:	a9 68       	lsl	r8,0x8
80000682:	e0 28 f0 00 	sub	r8,61440
80000686:	ef 48 ff f0 	st.w	r7[-16],r8
8000068a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000068e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000692:	f1 49 00 58 	st.w	r8[88],r9
80000696:	2f bd       	sub	sp,-20
80000698:	e3 cd 80 80 	ldm	sp++,r7,pc

8000069c <gpioSet>:
8000069c:	eb cd 40 80 	pushm	r7,lr
800006a0:	1a 97       	mov	r7,sp
800006a2:	20 5d       	sub	sp,20
800006a4:	ef 4c ff ec 	st.w	r7[-20],r12
800006a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800006ac:	a5 58       	asr	r8,0x5
800006ae:	ef 48 ff f4 	st.w	r7[-12],r8
800006b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800006b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800006ba:	ef 48 ff fc 	st.w	r7[-4],r8
800006be:	30 19       	mov	r9,1
800006c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006c4:	f2 08 09 48 	lsl	r8,r9,r8
800006c8:	ef 48 ff f8 	st.w	r7[-8],r8
800006cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006d0:	a9 68       	lsl	r8,0x8
800006d2:	e0 28 f0 00 	sub	r8,61440
800006d6:	ef 48 ff f0 	st.w	r7[-16],r8
800006da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800006e2:	f1 49 00 54 	st.w	r8[84],r9
800006e6:	2f bd       	sub	sp,-20
800006e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800006ec <ledInit>:
800006ec:	eb cd 40 80 	pushm	r7,lr
800006f0:	1a 97       	mov	r7,sp
800006f2:	20 9d       	sub	sp,36
800006f4:	49 e8       	lddpc	r8,8000076c <ledInit+0x80>
800006f6:	ee cb 00 24 	sub	r11,r7,36
800006fa:	10 9a       	mov	r10,r8
800006fc:	f4 e8 00 00 	ld.d	r8,r10[0]
80000700:	f6 e9 00 00 	st.d	r11[0],r8
80000704:	f4 e8 00 08 	ld.d	r8,r10[8]
80000708:	f6 e9 00 08 	st.d	r11[8],r8
8000070c:	f4 e8 00 10 	ld.d	r8,r10[16]
80000710:	f6 e9 00 10 	st.d	r11[16],r8
80000714:	f4 e8 00 18 	ld.d	r8,r10[24]
80000718:	f6 e9 00 18 	st.d	r11[24],r8
8000071c:	30 08       	mov	r8,0
8000071e:	ef 48 ff fc 	st.w	r7[-4],r8
80000722:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000726:	a3 68       	lsl	r8,0x2
80000728:	ee 08 00 08 	add	r8,r7,r8
8000072c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000730:	10 9c       	mov	r12,r8
80000732:	f0 1f 00 10 	mcall	80000770 <ledInit+0x84>
80000736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000073a:	a3 68       	lsl	r8,0x2
8000073c:	ee 08 00 08 	add	r8,r7,r8
80000740:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000744:	30 0b       	mov	r11,0
80000746:	10 9c       	mov	r12,r8
80000748:	f0 1f 00 0b 	mcall	80000774 <ledInit+0x88>
8000074c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000750:	58 78       	cp.w	r8,7
80000752:	5f 18       	srne	r8
80000754:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000758:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000075c:	2f f8       	sub	r8,-1
8000075e:	ef 48 ff fc 	st.w	r7[-4],r8
80000762:	58 09       	cp.w	r9,0
80000764:	cd f1       	brne	80000722 <ledInit+0x36>
80000766:	2f 7d       	sub	sp,-36
80000768:	e3 cd 80 80 	ldm	sp++,r7,pc
8000076c:	80 00       	ld.sh	r0,r0[0x0]
8000076e:	10 00       	add	r0,r8
80000770:	80 00       	ld.sh	r0,r0[0x0]
80000772:	07 98       	ld.ub	r8,r3[0x1]
80000774:	80 00       	ld.sh	r0,r0[0x0]
80000776:	05 a4       	ld.ub	r4,r2[0x2]

80000778 <ledOn>:
80000778:	eb cd 40 80 	pushm	r7,lr
8000077c:	1a 97       	mov	r7,sp
8000077e:	20 1d       	sub	sp,4
80000780:	ef 4c ff fc 	st.w	r7[-4],r12
80000784:	ee fc ff fc 	ld.w	r12,r7[-4]
80000788:	f0 1f 00 03 	mcall	80000794 <ledOn+0x1c>
8000078c:	2f fd       	sub	sp,-4
8000078e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000792:	00 00       	add	r0,r0
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	06 4c       	or	r12,r3

80000798 <ledOff>:
80000798:	eb cd 40 80 	pushm	r7,lr
8000079c:	1a 97       	mov	r7,sp
8000079e:	20 1d       	sub	sp,4
800007a0:	ef 4c ff fc 	st.w	r7[-4],r12
800007a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800007a8:	f0 1f 00 03 	mcall	800007b4 <ledOff+0x1c>
800007ac:	2f fd       	sub	sp,-4
800007ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800007b2:	00 00       	add	r0,r0
800007b4:	80 00       	ld.sh	r0,r0[0x0]
800007b6:	06 9c       	mov	r12,r3

800007b8 <potInit>:
800007b8:	d3 01       	pushm	r11-r12
800007ba:	e0 6c 10 00 	mov	r12,4096
800007be:	ea 1c ff ff 	orh	r12,0xffff
800007c2:	31 6b       	mov	r11,22
800007c4:	99 2b       	st.w	r12[0x8],r11
800007c6:	99 6b       	st.w	r12[0x18],r11
800007c8:	99 6b       	st.w	r12[0x18],r11
800007ca:	e0 6c 3c 00 	mov	r12,15360
800007ce:	ea 1c ff ff 	orh	r12,0xffff
800007d2:	30 1b       	mov	r11,1
800007d4:	99 0b       	st.w	r12[0x0],r11
800007d6:	e0 6b 0f 1f 	mov	r11,3871
800007da:	b1 6b       	lsl	r11,0x10
800007dc:	99 1b       	st.w	r12[0x4],r11
800007de:	30 2b       	mov	r11,2
800007e0:	99 4b       	st.w	r12[0x10],r11
800007e2:	d3 02       	popm	r11-r12
800007e4:	1c 9f       	mov	pc,lr

800007e6 <potGetValue>:
800007e6:	d1 81       	pushm	r10-r11
800007e8:	e0 6c 3c 00 	mov	r12,15360
800007ec:	ea 1c ff ff 	orh	r12,0xffff
800007f0:	30 2b       	mov	r11,2
800007f2:	99 0b       	st.w	r12[0x0],r11

800007f4 <a1>:
800007f4:	78 7a       	ld.w	r10,r12[0x1c]
800007f6:	16 7a       	tst	r10,r11
800007f8:	cf e0       	breq	800007f4 <a1>
800007fa:	78 dc       	ld.w	r12,r12[0x34]
800007fc:	d1 82       	popm	r10-r11
800007fe:	1c 9f       	mov	pc,lr

80000800 <usartReset>:
80000800:	eb cd 40 80 	pushm	r7,lr
80000804:	1a 97       	mov	r7,sp
80000806:	20 3d       	sub	sp,12
80000808:	ef 4c ff f8 	st.w	r7[-8],r12
8000080c:	f0 1f 00 16 	mcall	80000864 <usartReset+0x64>
80000810:	18 98       	mov	r8,r12
80000812:	ef 48 ff fc 	st.w	r7[-4],r8
80000816:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000081a:	58 08       	cp.w	r8,0
8000081c:	c0 30       	breq	80000822 <usartReset+0x22>
8000081e:	f0 1f 00 13 	mcall	80000868 <usartReset+0x68>
80000822:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000826:	3f f8       	mov	r8,-1
80000828:	93 38       	st.w	r9[0xc],r8
8000082a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000082e:	70 58       	ld.w	r8,r8[0x14]
80000830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000834:	58 08       	cp.w	r8,0
80000836:	c0 30       	breq	8000083c <usartReset+0x3c>
80000838:	f0 1f 00 0d 	mcall	8000086c <usartReset+0x6c>
8000083c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000840:	30 08       	mov	r8,0
80000842:	93 18       	st.w	r9[0x4],r8
80000844:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000848:	30 08       	mov	r8,0
8000084a:	93 98       	st.w	r9[0x24],r8
8000084c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000850:	30 08       	mov	r8,0
80000852:	93 a8       	st.w	r9[0x28],r8
80000854:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000858:	ea 68 61 0c 	mov	r8,680204
8000085c:	93 08       	st.w	r9[0x0],r8
8000085e:	2f dd       	sub	sp,-12
80000860:	e3 cd 80 80 	ldm	sp++,r7,pc
80000864:	80 00       	ld.sh	r0,r0[0x0]
80000866:	0d 6e       	ld.uh	lr,--r6
80000868:	80 00       	ld.sh	r0,r0[0x0]
8000086a:	0d 66       	ld.uh	r6,--r6
8000086c:	80 00       	ld.sh	r0,r0[0x0]
8000086e:	0d 6a       	ld.uh	r10,--r6

80000870 <usartSetBaudrate>:
80000870:	eb cd 40 80 	pushm	r7,lr
80000874:	1a 97       	mov	r7,sp
80000876:	20 bd       	sub	sp,44
80000878:	ef 4c ff ec 	st.w	r7[-20],r12
8000087c:	ef 4b ff e8 	st.w	r7[-24],r11
80000880:	ef 4a ff e4 	st.w	r7[-28],r10
80000884:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000888:	f0 09 15 04 	lsl	r9,r8,0x4
8000088c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000890:	10 39       	cp.w	r9,r8
80000892:	e0 8b 00 06 	brhi	8000089e <usartSetBaudrate+0x2e>
80000896:	31 09       	mov	r9,16
80000898:	ef 49 ff d4 	st.w	r7[-44],r9
8000089c:	c0 48       	rjmp	800008a4 <usartSetBaudrate+0x34>
8000089e:	30 88       	mov	r8,8
800008a0:	ef 48 ff d4 	st.w	r7[-44],r8
800008a4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800008a8:	ef 49 ff f0 	st.w	r7[-16],r9
800008ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
800008b0:	f0 0a 15 03 	lsl	r10,r8,0x3
800008b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800008b8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800008bc:	f2 08 02 48 	mul	r8,r9,r8
800008c0:	a1 98       	lsr	r8,0x1
800008c2:	10 0a       	add	r10,r8
800008c4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800008c8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800008cc:	f2 08 02 48 	mul	r8,r9,r8
800008d0:	f4 08 0d 08 	divu	r8,r10,r8
800008d4:	ef 48 ff f4 	st.w	r7[-12],r8
800008d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008dc:	a3 98       	lsr	r8,0x3
800008de:	ef 48 ff f8 	st.w	r7[-8],r8
800008e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008e6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800008ea:	ef 48 ff fc 	st.w	r7[-4],r8
800008ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008f2:	58 08       	cp.w	r8,0
800008f4:	c0 70       	breq	80000902 <usartSetBaudrate+0x92>
800008f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008fa:	e0 48 ff ff 	cp.w	r8,65535
800008fe:	e0 88 00 06 	brls	8000090a <usartSetBaudrate+0x9a>
80000902:	30 18       	mov	r8,1
80000904:	ef 48 ff d8 	st.w	r7[-40],r8
80000908:	c2 c8       	rjmp	80000960 <usartSetBaudrate+0xf0>
8000090a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000090e:	70 18       	ld.w	r8,r8[0x4]
80000910:	10 99       	mov	r9,r8
80000912:	e4 19 ff f7 	andh	r9,0xfff7
80000916:	e0 19 fe cf 	andl	r9,0xfecf
8000091a:	ef 49 ff dc 	st.w	r7[-36],r9
8000091e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000922:	59 08       	cp.w	r8,16
80000924:	c0 60       	breq	80000930 <usartSetBaudrate+0xc0>
80000926:	e8 68 00 00 	mov	r8,524288
8000092a:	ef 48 ff e0 	st.w	r7[-32],r8
8000092e:	c0 48       	rjmp	80000936 <usartSetBaudrate+0xc6>
80000930:	30 09       	mov	r9,0
80000932:	ef 49 ff e0 	st.w	r7[-32],r9
80000936:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000093a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000093e:	10 49       	or	r9,r8
80000940:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000944:	91 19       	st.w	r8[0x4],r9
80000946:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000094a:	f0 09 15 10 	lsl	r9,r8,0x10
8000094e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000952:	10 49       	or	r9,r8
80000954:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000958:	91 89       	st.w	r8[0x20],r9
8000095a:	30 09       	mov	r9,0
8000095c:	ef 49 ff d8 	st.w	r7[-40],r9
80000960:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000964:	10 9c       	mov	r12,r8
80000966:	2f 5d       	sub	sp,-44
80000968:	e3 cd 80 80 	ldm	sp++,r7,pc

8000096c <usartInit>:
8000096c:	eb cd 40 80 	pushm	r7,lr
80000970:	1a 97       	mov	r7,sp
80000972:	20 4d       	sub	sp,16
80000974:	ef 4c ff f8 	st.w	r7[-8],r12
80000978:	ef 4b ff f4 	st.w	r7[-12],r11
8000097c:	ef 4a ff f0 	st.w	r7[-16],r10
80000980:	fe 78 10 00 	mov	r8,-61440
80000984:	ef 48 ff fc 	st.w	r7[-4],r8
80000988:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000098c:	30 18       	mov	r8,1
8000098e:	93 28       	st.w	r9[0x8],r8
80000990:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000994:	30 28       	mov	r8,2
80000996:	93 28       	st.w	r9[0x8],r8
80000998:	ee fc ff f8 	ld.w	r12,r7[-8]
8000099c:	f0 1f 00 3b 	mcall	80000a88 <usartInit+0x11c>
800009a0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800009a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009a8:	70 08       	ld.w	r8,r8[0x0]
800009aa:	12 9a       	mov	r10,r9
800009ac:	10 9b       	mov	r11,r8
800009ae:	ee fc ff f8 	ld.w	r12,r7[-8]
800009b2:	f0 1f 00 37 	mcall	80000a8c <usartInit+0x120>
800009b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009ba:	11 c9       	ld.ub	r9,r8[0x4]
800009bc:	30 98       	mov	r8,9
800009be:	f0 09 18 00 	cp.b	r9,r8
800009c2:	c0 a1       	brne	800009d6 <usartInit+0x6a>
800009c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009c8:	70 18       	ld.w	r8,r8[0x4]
800009ca:	10 99       	mov	r9,r8
800009cc:	b1 b9       	sbr	r9,0x11
800009ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009d2:	91 19       	st.w	r8[0x4],r9
800009d4:	c0 d8       	rjmp	800009ee <usartInit+0x82>
800009d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009da:	70 19       	ld.w	r9,r8[0x4]
800009dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009e0:	11 c8       	ld.ub	r8,r8[0x4]
800009e2:	20 58       	sub	r8,5
800009e4:	a7 68       	lsl	r8,0x6
800009e6:	10 49       	or	r9,r8
800009e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009ec:	91 19       	st.w	r8[0x4],r9
800009ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009f2:	70 1a       	ld.w	r10,r8[0x4]
800009f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009f8:	11 d8       	ld.ub	r8,r8[0x5]
800009fa:	f0 09 15 09 	lsl	r9,r8,0x9
800009fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a02:	f1 38 00 08 	ld.ub	r8,r8[8]
80000a06:	af 68       	lsl	r8,0xe
80000a08:	f3 e8 10 08 	or	r8,r9,r8
80000a0c:	f5 e8 10 09 	or	r9,r10,r8
80000a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a14:	91 19       	st.w	r8[0x4],r9
80000a16:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a1a:	90 39       	ld.sh	r9,r8[0x6]
80000a1c:	30 28       	mov	r8,2
80000a1e:	f0 09 19 00 	cp.h	r9,r8
80000a22:	e0 88 00 14 	brls	80000a4a <usartInit+0xde>
80000a26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a2a:	70 18       	ld.w	r8,r8[0x4]
80000a2c:	10 99       	mov	r9,r8
80000a2e:	ad b9       	sbr	r9,0xd
80000a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a34:	91 19       	st.w	r8[0x4],r9
80000a36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a3a:	90 38       	ld.sh	r8,r8[0x6]
80000a3c:	5c 78       	castu.h	r8
80000a3e:	20 28       	sub	r8,2
80000a40:	10 99       	mov	r9,r8
80000a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a46:	91 a9       	st.w	r8[0x28],r9
80000a48:	c0 d8       	rjmp	80000a62 <usartInit+0xf6>
80000a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a4e:	70 19       	ld.w	r9,r8[0x4]
80000a50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a54:	90 38       	ld.sh	r8,r8[0x6]
80000a56:	5c 78       	castu.h	r8
80000a58:	ad 68       	lsl	r8,0xc
80000a5a:	10 49       	or	r9,r8
80000a5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a60:	91 19       	st.w	r8[0x4],r9
80000a62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a66:	70 18       	ld.w	r8,r8[0x4]
80000a68:	10 99       	mov	r9,r8
80000a6a:	e0 19 ff f0 	andl	r9,0xfff0
80000a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a72:	91 19       	st.w	r8[0x4],r9
80000a74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a78:	35 08       	mov	r8,80
80000a7a:	93 08       	st.w	r9[0x0],r8
80000a7c:	30 08       	mov	r8,0
80000a7e:	10 9c       	mov	r12,r8
80000a80:	2f cd       	sub	sp,-16
80000a82:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a86:	00 00       	add	r0,r0
80000a88:	80 00       	ld.sh	r0,r0[0x0]
80000a8a:	08 00       	add	r0,r4
80000a8c:	80 00       	ld.sh	r0,r0[0x0]
80000a8e:	08 70       	tst	r0,r4

80000a90 <timerInit>:
80000a90:	d5 01       	pushm	r11,lr
80000a92:	d2 01       	pushm	r12
80000a94:	f0 1f 00 28 	mcall	80000b34 <timerClearInterrupt+0x10>
80000a98:	f0 1f 00 28 	mcall	80000b38 <timerClearInterrupt+0x14>
80000a9c:	e0 6c 38 00 	mov	r12,14336
80000aa0:	ea 1c ff ff 	orh	r12,0xffff
80000aa4:	e0 6b c0 00 	mov	r11,49152
80000aa8:	ea 1b 00 00 	orh	r11,0x0
80000aac:	99 1b       	st.w	r12[0x4],r11
80000aae:	30 1b       	mov	r11,1
80000ab0:	a5 6b       	lsl	r11,0x4
80000ab2:	99 9b       	st.w	r12[0x24],r11
80000ab4:	d2 02       	popm	r12
80000ab6:	f0 1f 00 22 	mcall	80000b3c <timerClearInterrupt+0x18>
80000aba:	d5 02       	popm	r11,lr
80000abc:	1c 9f       	mov	pc,lr

80000abe <timerReset>:
80000abe:	d3 01       	pushm	r11-r12
80000ac0:	e0 6c 38 00 	mov	r12,14336
80000ac4:	ea 1c ff ff 	orh	r12,0xffff
80000ac8:	30 5b       	mov	r11,5
80000aca:	99 0b       	st.w	r12[0x0],r11
80000acc:	e0 6b 00 08 	mov	r11,8
80000ad0:	ea 1b 00 00 	orh	r11,0x0
80000ad4:	76 0b       	ld.w	r11,r11[0x0]
80000ad6:	99 7b       	st.w	r12[0x1c],r11
80000ad8:	d3 02       	popm	r11-r12
80000ada:	1c 9f       	mov	pc,lr

80000adc <timerStop>:
80000adc:	d3 01       	pushm	r11-r12
80000ade:	e0 6c 38 00 	mov	r12,14336
80000ae2:	ea 1c ff ff 	orh	r12,0xffff
80000ae6:	30 2b       	mov	r11,2
80000ae8:	99 0b       	st.w	r12[0x0],r11
80000aea:	d3 02       	popm	r11-r12
80000aec:	1c 9f       	mov	pc,lr

80000aee <timerRCSet>:
80000aee:	d3 01       	pushm	r11-r12
80000af0:	49 4b       	lddpc	r11,80000b40 <timerClearInterrupt+0x1c>
80000af2:	97 0c       	st.w	r11[0x0],r12
80000af4:	e0 6c 38 00 	mov	r12,14336
80000af8:	ea 1c ff ff 	orh	r12,0xffff
80000afc:	76 0b       	ld.w	r11,r11[0x0]
80000afe:	99 7b       	st.w	r12[0x1c],r11
80000b00:	d3 02       	popm	r11-r12
80000b02:	1c 9f       	mov	pc,lr

80000b04 <timerPrescaleSet>:
80000b04:	d3 81       	pushm	r10-r12
80000b06:	49 0b       	lddpc	r11,80000b44 <timerClearInterrupt+0x20>
80000b08:	97 0c       	st.w	r11[0x0],r12
80000b0a:	e0 6c 38 00 	mov	r12,14336
80000b0e:	ea 1c ff ff 	orh	r12,0xffff
80000b12:	78 1a       	ld.w	r10,r12[0x4]
80000b14:	3f 8b       	mov	r11,-8
80000b16:	16 6a       	and	r10,r11
80000b18:	48 bb       	lddpc	r11,80000b44 <timerClearInterrupt+0x20>
80000b1a:	76 0b       	ld.w	r11,r11[0x0]
80000b1c:	14 4b       	or	r11,r10
80000b1e:	99 1b       	st.w	r12[0x4],r11
80000b20:	d3 82       	popm	r10-r12
80000b22:	1c 9f       	mov	pc,lr

80000b24 <timerClearInterrupt>:
80000b24:	d2 01       	pushm	r12
80000b26:	e0 6c 38 00 	mov	r12,14336
80000b2a:	ea 1c ff ff 	orh	r12,0xffff
80000b2e:	78 8c       	ld.w	r12,r12[0x20]
80000b30:	d2 02       	popm	r12
80000b32:	1c 9f       	mov	pc,lr
80000b34:	80 00       	ld.sh	r0,r0[0x0]
80000b36:	0d 66       	ld.uh	r6,--r6
80000b38:	80 00       	ld.sh	r0,r0[0x0]
80000b3a:	0b 24       	ld.uh	r4,r5++
80000b3c:	80 00       	ld.sh	r0,r0[0x0]
80000b3e:	04 50       	eor	r0,r2
80000b40:	00 00       	add	r0,r0
80000b42:	00 08       	add	r8,r0
80000b44:	00 00       	add	r0,r0
80000b46:	00 0c       	add	r12,r0

80000b48 <_stext>:
80000b48:	49 7d       	lddpc	sp,80000ba4 <udata_end+0x4>
80000b4a:	49 80       	lddpc	r0,80000ba8 <udata_end+0x8>
80000b4c:	1a d0       	st.w	--sp,r0
80000b4e:	e5 cd 20 00 	ldmts	sp,sp
80000b52:	1b 00       	ld.w	r0,sp++
80000b54:	49 60       	lddpc	r0,80000bac <udata_end+0xc>
80000b56:	e3 b0 00 01 	mtsr	0x4,r0
80000b5a:	d5 53       	csrf	0x15
80000b5c:	e0 6c 0c 00 	mov	r12,3072
80000b60:	ea 1c ff ff 	orh	r12,0xffff
80000b64:	e0 6b 01 07 	mov	r11,263
80000b68:	99 ab       	st.w	r12[0x28],r11
80000b6a:	30 4b       	mov	r11,4
80000b6c:	99 0b       	st.w	r12[0x0],r11
80000b6e:	e0 6a 00 80 	mov	r10,128

80000b72 <xw8>:
80000b72:	79 5b       	ld.w	r11,r12[0x54]
80000b74:	14 7b       	tst	r11,r10
80000b76:	cf e0       	breq	80000b72 <xw8>
80000b78:	30 5b       	mov	r11,5
80000b7a:	99 0b       	st.w	r12[0x0],r11

80000b7c <idata_>:
80000b7c:	48 d0       	lddpc	r0,80000bb0 <udata_end+0x10>
80000b7e:	48 e1       	lddpc	r1,80000bb4 <udata_end+0x14>
80000b80:	02 30       	cp.w	r0,r1
80000b82:	c0 62       	brcc	80000b8e <idata_end>
80000b84:	48 d2       	lddpc	r2,80000bb8 <udata_end+0x18>

80000b86 <idata_loop>:
80000b86:	05 04       	ld.w	r4,r2++
80000b88:	00 a4       	st.w	r0++,r4
80000b8a:	02 30       	cp.w	r0,r1
80000b8c:	cf d3       	brcs	80000b86 <idata_loop>

80000b8e <idata_end>:
80000b8e:	48 c0       	lddpc	r0,80000bbc <udata_end+0x1c>
80000b90:	48 c1       	lddpc	r1,80000bc0 <udata_end+0x20>
80000b92:	02 30       	cp.w	r0,r1
80000b94:	c0 62       	brcc	80000ba0 <udata_end>
80000b96:	30 02       	mov	r2,0
80000b98:	30 03       	mov	r3,0

80000b9a <udata_loop>:
80000b9a:	00 a2       	st.w	r0++,r2
80000b9c:	02 30       	cp.w	r0,r1
80000b9e:	cf e3       	brcs	80000b9a <udata_loop>

80000ba0 <udata_end>:
80000ba0:	48 9f       	lddpc	pc,80000bc4 <udata_end+0x24>
80000ba2:	00 00       	add	r0,r0
80000ba4:	00 01       	add	r1,r0
80000ba6:	00 00       	add	r0,r0
80000ba8:	00 00       	add	r0,r0
80000baa:	f0 00       	*unknown*
80000bac:	80 00       	ld.sh	r0,r0[0x0]
80000bae:	0c 00       	add	r0,r6
80000bb0:	00 00       	add	r0,r0
80000bb2:	00 08       	add	r8,r0
80000bb4:	00 00       	add	r0,r0
80000bb6:	00 10       	sub	r0,r0
80000bb8:	80 00       	ld.sh	r0,r0[0x0]
80000bba:	10 20       	rsub	r0,r8
80000bbc:	00 00       	add	r0,r0
80000bbe:	00 10       	sub	r0,r0
80000bc0:	00 00       	add	r0,r0
80000bc2:	02 e8       	st.h	--r1,r8
80000bc4:	80 00       	ld.sh	r0,r0[0x0]
80000bc6:	00 b8       	st.h	r0++,r8

Disassembly of section .exception:

80000c00 <_evba>:
	...

80000c28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80000c28:	c7 a8       	rjmp	80000d1c <privilegedCalls>
	...

80000d00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80000d00:	1c 9f       	mov	pc,lr

80000d02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80000d02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80000d06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80000d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80000d0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80000d12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80000d14:	c0 31       	brne	80000d1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80000d16:	4b 9c       	lddpc	r12,80000df8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80000d18:	18 9f       	mov	pc,r12

80000d1a <_int0_exit>:
_int0_exit:
	rete
80000d1a:	d6 03       	rete

80000d1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80000d1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80000d1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80000d20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80000d22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80000d24:	9b 3c       	st.w	sp[0xc],r12

80000d26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80000d26:	4b 6c       	lddpc	r12,80000dfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80000d28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80000d2a:	c0 61       	brne	80000d36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80000d2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80000d2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80000d30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80000d32:	d3 02       	popm	r11-r12
	rete
80000d34:	d6 03       	rete

80000d36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80000d36:	4b 3c       	lddpc	r12,80000e00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80000d38:	18 3b       	cp.w	r11,r12
	brne privexception
80000d3a:	c0 61       	brne	80000d46 <privexception>
	ld.w r12,sp[USERSR]
80000d3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80000d3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80000d40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80000d42:	d3 02       	popm	r11-r12
	rete
80000d44:	d6 03       	rete

80000d46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80000d46:	c0 08       	rjmp	80000d46 <privexception>

80000d48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80000d48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80000d4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80000d4e:	4a ec       	lddpc	r12,80000e04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80000d50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80000d52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80000d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80000d58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80000d5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80000d60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80000d62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80000d64:	1c 9f       	mov	pc,lr

80000d66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80000d66:	d3 03       	ssrf	0x10
	mov pc,lr
80000d68:	1c 9f       	mov	pc,lr

80000d6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80000d6a:	d5 03       	csrf	0x10
	mov pc,lr
80000d6c:	1c 9f       	mov	pc,lr

80000d6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80000d6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80000d72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80000d74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80000d78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80000d7c:	1c 9f       	mov	pc,lr

80000d7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000d7e:	4a 3c       	lddpc	r12,80000e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80000d80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80000d82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80000d84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80000d86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80000d88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80000d8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80000d8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80000d8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80000d90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80000d92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80000d94:	33 40       	mov	r0,52
	add r0,r12
80000d96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000d98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80000d9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80000d9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80000da2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80000da4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80000da6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80000da8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80000daa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000dac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000dae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80000db2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80000db4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80000db6:	1c 9f       	mov	pc,lr

80000db8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000db8:	49 4c       	lddpc	r12,80000e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80000dba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80000dbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000dbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000dc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80000dc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80000dc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80000dc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000dca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80000dcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000dce:	33 40       	mov	r0,52
	add r0,r12
80000dd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000dd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80000dd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80000dda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80000ddc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80000dde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80000de0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80000de2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80000de4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80000de6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80000de8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000dea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80000dec:	d4 01       	pushm	lr
	call timerStart
80000dee:	f0 1f 00 08 	mcall	80000e0c <contextRestoreFromISR+0x54>
	popm lr
80000df2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80000df4:	1c 9f       	mov	pc,lr
80000df6:	00 00       	add	r0,r0
80000df8:	80 00       	ld.sh	r0,r0[0x0]
80000dfa:	04 00       	add	r0,r2
80000dfc:	80 00       	ld.sh	r0,r0[0x0]
80000dfe:	0d 66       	ld.uh	r6,--r6
80000e00:	80 00       	ld.sh	r0,r0[0x0]
80000e02:	0d 6a       	ld.uh	r10,--r6
80000e04:	80 00       	ld.sh	r0,r0[0x0]
80000e06:	0c 00       	add	r0,r6
80000e08:	00 00       	add	r0,r0
80000e0a:	02 e4       	st.h	--r1,r4
80000e0c:	80 00       	ld.sh	r0,r0[0x0]
80000e0e:	0a be       	st.h	r5++,lr
	...
